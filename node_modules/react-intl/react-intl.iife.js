var ReactIntl = (function() {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ function(x) {
    return typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
      get: function(a, b) {
        return (typeof require !== "undefined" ? require : a)[b];
      }
    }) : x;
  }(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = function(cb, mod) {
    return function __require2() {
      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
  };
  var __export = function(target, all) {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = function(to, from, except, desc) {
    if (from && typeof from === "object" || typeof from === "function")
      for (var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++) {
        key = keys[i];
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: function(k) {
            return from[k];
          }.bind(null, key), enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
    return to;
  };
  var __toESM = function(mod, isNodeMode, target) {
    return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod);
  };
  var __toCommonJS = function(mod) {
    return __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  };

  // bazel-out/darwin-fastbuild/bin/external/npm/node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "bazel-out/darwin-fastbuild/bin/external/npm/node_modules/tslib/tslib.js": function(exports, module) {
      var __extends2;
      var __assign5;
      var __rest6;
      var __decorate;
      var __param;
      var __metadata;
      var __awaiter;
      var __generator;
      var __exportStar;
      var __values;
      var __read;
      var __spread;
      var __spreadArrays;
      var __spreadArray2;
      var __await;
      var __asyncGenerator;
      var __asyncDelegator;
      var __asyncValues;
      var __makeTemplateObject;
      var __importStar;
      var __importDefault;
      var __classPrivateFieldGet;
      var __classPrivateFieldSet;
      var __classPrivateFieldIn;
      var __createBinding;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v) {
            return exports2[id] = previous ? previous(id, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p))
              d[p] = b[p];
        };
        __extends2 = function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign5 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest6 = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate = function(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding(o, m, p);
        };
        __createBinding = Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          var desc = Object.getOwnPropertyDescriptor(m, k);
          if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m[k];
            } };
          }
          Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __values = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error: error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
          return ar;
        };
        __spreadArrays = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __spreadArray2 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
        __await = function(v) {
          return this instanceof __await ? (this.v = v, this) : new __await(v);
        };
        __asyncGenerator = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        };
        __importStar = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet = function(receiver, state, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
        };
        __classPrivateFieldSet = function(receiver, state, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends2);
        exporter("__assign", __assign5);
        exporter("__rest", __rest6);
        exporter("__decorate", __decorate);
        exporter("__param", __param);
        exporter("__metadata", __metadata);
        exporter("__awaiter", __awaiter);
        exporter("__generator", __generator);
        exporter("__exportStar", __exportStar);
        exporter("__createBinding", __createBinding);
        exporter("__values", __values);
        exporter("__read", __read);
        exporter("__spread", __spread);
        exporter("__spreadArrays", __spreadArrays);
        exporter("__spreadArray", __spreadArray2);
        exporter("__await", __await);
        exporter("__asyncGenerator", __asyncGenerator);
        exporter("__asyncDelegator", __asyncDelegator);
        exporter("__asyncValues", __asyncValues);
        exporter("__makeTemplateObject", __makeTemplateObject);
        exporter("__importStar", __importStar);
        exporter("__importDefault", __importDefault);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn);
      });
    }
  });

  // bazel-out/darwin-fastbuild/bin/external/npm/node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "bazel-out/darwin-fastbuild/bin/external/npm/node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js": function(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment6 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment6;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // bazel-out/darwin-fastbuild/bin/external/npm/node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "bazel-out/darwin-fastbuild/bin/external/npm/node_modules/hoist-non-react-statics/node_modules/react-is/index.js": function(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // bazel-out/darwin-fastbuild/bin/external/npm/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "bazel-out/darwin-fastbuild/bin/external/npm/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js": function(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics2;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/CanonicalizeLocaleList.js
  var require_CanonicalizeLocaleList = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/CanonicalizeLocaleList.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CanonicalizeLocaleList = void 0;
      function CanonicalizeLocaleList(locales) {
        return Intl.getCanonicalLocales(locales);
      }
      exports.CanonicalizeLocaleList = CanonicalizeLocaleList;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/CanonicalizeTimeZoneName.js
  var require_CanonicalizeTimeZoneName = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/CanonicalizeTimeZoneName.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CanonicalizeTimeZoneName = void 0;
      function CanonicalizeTimeZoneName(tz, _a) {
        var tzData = _a.tzData, uppercaseLinks = _a.uppercaseLinks;
        var uppercasedTz = tz.toUpperCase();
        var uppercasedZones = Object.keys(tzData).reduce(function(all, z) {
          all[z.toUpperCase()] = z;
          return all;
        }, {});
        var ianaTimeZone = uppercaseLinks[uppercasedTz] || uppercasedZones[uppercasedTz];
        if (ianaTimeZone === "Etc/UTC" || ianaTimeZone === "Etc/GMT") {
          return "UTC";
        }
        return ianaTimeZone;
      }
      exports.CanonicalizeTimeZoneName = CanonicalizeTimeZoneName;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/262.js
  var require__ = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/262.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.msFromTime = exports.OrdinaryHasInstance = exports.SecFromTime = exports.MinFromTime = exports.HourFromTime = exports.DateFromTime = exports.MonthFromTime = exports.InLeapYear = exports.DayWithinYear = exports.DaysInYear = exports.YearFromTime = exports.TimeFromYear = exports.DayFromYear = exports.WeekDay = exports.Day = exports.Type = exports.HasOwnProperty = exports.ArrayCreate = exports.SameValue = exports.ToObject = exports.TimeClip = exports.ToNumber = exports.ToString = void 0;
      function ToString(o) {
        if (typeof o === "symbol") {
          throw TypeError("Cannot convert a Symbol value to a string");
        }
        return String(o);
      }
      exports.ToString = ToString;
      function ToNumber(val) {
        if (val === void 0) {
          return NaN;
        }
        if (val === null) {
          return 0;
        }
        if (typeof val === "boolean") {
          return val ? 1 : 0;
        }
        if (typeof val === "number") {
          return val;
        }
        if (typeof val === "symbol" || typeof val === "bigint") {
          throw new TypeError("Cannot convert symbol/bigint to number");
        }
        return Number(val);
      }
      exports.ToNumber = ToNumber;
      function ToInteger(n) {
        var number = ToNumber(n);
        if (isNaN(number) || SameValue(number, -0)) {
          return 0;
        }
        if (isFinite(number)) {
          return number;
        }
        var integer = Math.floor(Math.abs(number));
        if (number < 0) {
          integer = -integer;
        }
        if (SameValue(integer, -0)) {
          return 0;
        }
        return integer;
      }
      function TimeClip(time) {
        if (!isFinite(time)) {
          return NaN;
        }
        if (Math.abs(time) > 8.64 * 1e15) {
          return NaN;
        }
        return ToInteger(time);
      }
      exports.TimeClip = TimeClip;
      function ToObject(arg) {
        if (arg == null) {
          throw new TypeError("undefined/null cannot be converted to object");
        }
        return Object(arg);
      }
      exports.ToObject = ToObject;
      function SameValue(x, y) {
        if (Object.is) {
          return Object.is(x, y);
        }
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        }
        return x !== x && y !== y;
      }
      exports.SameValue = SameValue;
      function ArrayCreate(len) {
        return new Array(len);
      }
      exports.ArrayCreate = ArrayCreate;
      function HasOwnProperty(o, prop) {
        return Object.prototype.hasOwnProperty.call(o, prop);
      }
      exports.HasOwnProperty = HasOwnProperty;
      function Type(x) {
        if (x === null) {
          return "Null";
        }
        if (typeof x === "undefined") {
          return "Undefined";
        }
        if (typeof x === "function" || typeof x === "object") {
          return "Object";
        }
        if (typeof x === "number") {
          return "Number";
        }
        if (typeof x === "boolean") {
          return "Boolean";
        }
        if (typeof x === "string") {
          return "String";
        }
        if (typeof x === "symbol") {
          return "Symbol";
        }
        if (typeof x === "bigint") {
          return "BigInt";
        }
      }
      exports.Type = Type;
      var MS_PER_DAY = 864e5;
      function mod(x, y) {
        return x - Math.floor(x / y) * y;
      }
      function Day(t) {
        return Math.floor(t / MS_PER_DAY);
      }
      exports.Day = Day;
      function WeekDay(t) {
        return mod(Day(t) + 4, 7);
      }
      exports.WeekDay = WeekDay;
      function DayFromYear(y) {
        return Date.UTC(y, 0) / MS_PER_DAY;
      }
      exports.DayFromYear = DayFromYear;
      function TimeFromYear(y) {
        return Date.UTC(y, 0);
      }
      exports.TimeFromYear = TimeFromYear;
      function YearFromTime(t) {
        return new Date(t).getUTCFullYear();
      }
      exports.YearFromTime = YearFromTime;
      function DaysInYear(y) {
        if (y % 4 !== 0) {
          return 365;
        }
        if (y % 100 !== 0) {
          return 366;
        }
        if (y % 400 !== 0) {
          return 365;
        }
        return 366;
      }
      exports.DaysInYear = DaysInYear;
      function DayWithinYear(t) {
        return Day(t) - DayFromYear(YearFromTime(t));
      }
      exports.DayWithinYear = DayWithinYear;
      function InLeapYear(t) {
        return DaysInYear(YearFromTime(t)) === 365 ? 0 : 1;
      }
      exports.InLeapYear = InLeapYear;
      function MonthFromTime(t) {
        var dwy = DayWithinYear(t);
        var leap = InLeapYear(t);
        if (dwy >= 0 && dwy < 31) {
          return 0;
        }
        if (dwy < 59 + leap) {
          return 1;
        }
        if (dwy < 90 + leap) {
          return 2;
        }
        if (dwy < 120 + leap) {
          return 3;
        }
        if (dwy < 151 + leap) {
          return 4;
        }
        if (dwy < 181 + leap) {
          return 5;
        }
        if (dwy < 212 + leap) {
          return 6;
        }
        if (dwy < 243 + leap) {
          return 7;
        }
        if (dwy < 273 + leap) {
          return 8;
        }
        if (dwy < 304 + leap) {
          return 9;
        }
        if (dwy < 334 + leap) {
          return 10;
        }
        if (dwy < 365 + leap) {
          return 11;
        }
        throw new Error("Invalid time");
      }
      exports.MonthFromTime = MonthFromTime;
      function DateFromTime(t) {
        var dwy = DayWithinYear(t);
        var mft = MonthFromTime(t);
        var leap = InLeapYear(t);
        if (mft === 0) {
          return dwy + 1;
        }
        if (mft === 1) {
          return dwy - 30;
        }
        if (mft === 2) {
          return dwy - 58 - leap;
        }
        if (mft === 3) {
          return dwy - 89 - leap;
        }
        if (mft === 4) {
          return dwy - 119 - leap;
        }
        if (mft === 5) {
          return dwy - 150 - leap;
        }
        if (mft === 6) {
          return dwy - 180 - leap;
        }
        if (mft === 7) {
          return dwy - 211 - leap;
        }
        if (mft === 8) {
          return dwy - 242 - leap;
        }
        if (mft === 9) {
          return dwy - 272 - leap;
        }
        if (mft === 10) {
          return dwy - 303 - leap;
        }
        if (mft === 11) {
          return dwy - 333 - leap;
        }
        throw new Error("Invalid time");
      }
      exports.DateFromTime = DateFromTime;
      var HOURS_PER_DAY = 24;
      var MINUTES_PER_HOUR = 60;
      var SECONDS_PER_MINUTE = 60;
      var MS_PER_SECOND = 1e3;
      var MS_PER_MINUTE = MS_PER_SECOND * SECONDS_PER_MINUTE;
      var MS_PER_HOUR = MS_PER_MINUTE * MINUTES_PER_HOUR;
      function HourFromTime(t) {
        return mod(Math.floor(t / MS_PER_HOUR), HOURS_PER_DAY);
      }
      exports.HourFromTime = HourFromTime;
      function MinFromTime(t) {
        return mod(Math.floor(t / MS_PER_MINUTE), MINUTES_PER_HOUR);
      }
      exports.MinFromTime = MinFromTime;
      function SecFromTime(t) {
        return mod(Math.floor(t / MS_PER_SECOND), SECONDS_PER_MINUTE);
      }
      exports.SecFromTime = SecFromTime;
      function IsCallable(fn) {
        return typeof fn === "function";
      }
      function OrdinaryHasInstance(C, O, internalSlots) {
        if (!IsCallable(C)) {
          return false;
        }
        if (internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction) {
          var BC = internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction;
          return O instanceof BC;
        }
        if (typeof O !== "object") {
          return false;
        }
        var P = C.prototype;
        if (typeof P !== "object") {
          throw new TypeError("OrdinaryHasInstance called on an object with an invalid prototype property.");
        }
        return Object.prototype.isPrototypeOf.call(P, O);
      }
      exports.OrdinaryHasInstance = OrdinaryHasInstance;
      function msFromTime(t) {
        return mod(t, MS_PER_SECOND);
      }
      exports.msFromTime = msFromTime;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/CoerceOptionsToObject.js
  var require_CoerceOptionsToObject = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/CoerceOptionsToObject.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CoerceOptionsToObject = void 0;
      var _262_1 = require__();
      function CoerceOptionsToObject(options) {
        if (typeof options === "undefined") {
          return /* @__PURE__ */ Object.create(null);
        }
        return (0, _262_1.ToObject)(options);
      }
      exports.CoerceOptionsToObject = CoerceOptionsToObject;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/DefaultNumberOption.js
  var require_DefaultNumberOption = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/DefaultNumberOption.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DefaultNumberOption = void 0;
      function DefaultNumberOption(val, min, max, fallback) {
        if (val !== void 0) {
          val = Number(val);
          if (isNaN(val) || val < min || val > max) {
            throw new RangeError("".concat(val, " is outside of range [").concat(min, ", ").concat(max, "]"));
          }
          return Math.floor(val);
        }
        return fallback;
      }
      exports.DefaultNumberOption = DefaultNumberOption;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/GetNumberOption.js
  var require_GetNumberOption = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/GetNumberOption.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GetNumberOption = void 0;
      var DefaultNumberOption_1 = require_DefaultNumberOption();
      function GetNumberOption(options, property, minimum, maximum, fallback) {
        var val = options[property];
        return (0, DefaultNumberOption_1.DefaultNumberOption)(val, minimum, maximum, fallback);
      }
      exports.GetNumberOption = GetNumberOption;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/GetOption.js
  var require_GetOption = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/GetOption.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GetOption = void 0;
      var _262_1 = require__();
      function GetOption(opts, prop, type, values, fallback) {
        if (typeof opts !== "object") {
          throw new TypeError("Options must be an object");
        }
        var value = opts[prop];
        if (value !== void 0) {
          if (type !== "boolean" && type !== "string") {
            throw new TypeError("invalid type");
          }
          if (type === "boolean") {
            value = Boolean(value);
          }
          if (type === "string") {
            value = (0, _262_1.ToString)(value);
          }
          if (values !== void 0 && !values.filter(function(val) {
            return val == value;
          }).length) {
            throw new RangeError("".concat(value, " is not within ").concat(values.join(", ")));
          }
          return value;
        }
        return fallback;
      }
      exports.GetOption = GetOption;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/GetOptionsObject.js
  var require_GetOptionsObject = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/GetOptionsObject.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GetOptionsObject = void 0;
      function GetOptionsObject(options) {
        if (typeof options === "undefined") {
          return /* @__PURE__ */ Object.create(null);
        }
        if (typeof options === "object") {
          return options;
        }
        throw new TypeError("Options must be an object");
      }
      exports.GetOptionsObject = GetOptionsObject;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/IsSanctionedSimpleUnitIdentifier.js
  var require_IsSanctionedSimpleUnitIdentifier = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/IsSanctionedSimpleUnitIdentifier.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IsSanctionedSimpleUnitIdentifier = exports.SIMPLE_UNITS = exports.removeUnitNamespace = exports.SANCTIONED_UNITS = void 0;
      exports.SANCTIONED_UNITS = [
        "angle-degree",
        "area-acre",
        "area-hectare",
        "concentr-percent",
        "digital-bit",
        "digital-byte",
        "digital-gigabit",
        "digital-gigabyte",
        "digital-kilobit",
        "digital-kilobyte",
        "digital-megabit",
        "digital-megabyte",
        "digital-petabyte",
        "digital-terabit",
        "digital-terabyte",
        "duration-day",
        "duration-hour",
        "duration-millisecond",
        "duration-minute",
        "duration-month",
        "duration-second",
        "duration-week",
        "duration-year",
        "length-centimeter",
        "length-foot",
        "length-inch",
        "length-kilometer",
        "length-meter",
        "length-mile-scandinavian",
        "length-mile",
        "length-millimeter",
        "length-yard",
        "mass-gram",
        "mass-kilogram",
        "mass-ounce",
        "mass-pound",
        "mass-stone",
        "temperature-celsius",
        "temperature-fahrenheit",
        "volume-fluid-ounce",
        "volume-gallon",
        "volume-liter",
        "volume-milliliter"
      ];
      function removeUnitNamespace(unit) {
        return unit.slice(unit.indexOf("-") + 1);
      }
      exports.removeUnitNamespace = removeUnitNamespace;
      exports.SIMPLE_UNITS = exports.SANCTIONED_UNITS.map(removeUnitNamespace);
      function IsSanctionedSimpleUnitIdentifier(unitIdentifier) {
        return exports.SIMPLE_UNITS.indexOf(unitIdentifier) > -1;
      }
      exports.IsSanctionedSimpleUnitIdentifier = IsSanctionedSimpleUnitIdentifier;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/IsValidTimeZoneName.js
  var require_IsValidTimeZoneName = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/IsValidTimeZoneName.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IsValidTimeZoneName = void 0;
      function IsValidTimeZoneName(tz, _a) {
        var tzData = _a.tzData, uppercaseLinks = _a.uppercaseLinks;
        var uppercasedTz = tz.toUpperCase();
        var zoneNames = /* @__PURE__ */ new Set();
        var linkNames = /* @__PURE__ */ new Set();
        Object.keys(tzData).map(function(z) {
          return z.toUpperCase();
        }).forEach(function(z) {
          return zoneNames.add(z);
        });
        Object.keys(uppercaseLinks).forEach(function(linkName) {
          linkNames.add(linkName.toUpperCase());
          zoneNames.add(uppercaseLinks[linkName].toUpperCase());
        });
        return zoneNames.has(uppercasedTz) || linkNames.has(uppercasedTz);
      }
      exports.IsValidTimeZoneName = IsValidTimeZoneName;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/IsWellFormedCurrencyCode.js
  var require_IsWellFormedCurrencyCode = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/IsWellFormedCurrencyCode.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IsWellFormedCurrencyCode = void 0;
      function toUpperCase(str) {
        return str.replace(/([a-z])/g, function(_, c) {
          return c.toUpperCase();
        });
      }
      var NOT_A_Z_REGEX = /[^A-Z]/;
      function IsWellFormedCurrencyCode(currency) {
        currency = toUpperCase(currency);
        if (currency.length !== 3) {
          return false;
        }
        if (NOT_A_Z_REGEX.test(currency)) {
          return false;
        }
        return true;
      }
      exports.IsWellFormedCurrencyCode = IsWellFormedCurrencyCode;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/IsWellFormedUnitIdentifier.js
  var require_IsWellFormedUnitIdentifier = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/IsWellFormedUnitIdentifier.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IsWellFormedUnitIdentifier = void 0;
      var IsSanctionedSimpleUnitIdentifier_1 = require_IsSanctionedSimpleUnitIdentifier();
      function toLowerCase(str) {
        return str.replace(/([A-Z])/g, function(_, c) {
          return c.toLowerCase();
        });
      }
      function IsWellFormedUnitIdentifier(unit) {
        unit = toLowerCase(unit);
        if ((0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(unit)) {
          return true;
        }
        var units = unit.split("-per-");
        if (units.length !== 2) {
          return false;
        }
        var numerator = units[0], denominator = units[1];
        if (!(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(numerator) || !(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(denominator)) {
          return false;
        }
        return true;
      }
      exports.IsWellFormedUnitIdentifier = IsWellFormedUnitIdentifier;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/utils.js
  var require_utils = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/utils.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = exports.defineProperty = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports.setMultiInternalSlots = exports.setInternalSlot = exports.repeat = exports.getMagnitude = void 0;
      function getMagnitude(x) {
        return Math.floor(Math.log(x) * Math.LOG10E);
      }
      exports.getMagnitude = getMagnitude;
      function repeat(s, times) {
        if (typeof s.repeat === "function") {
          return s.repeat(times);
        }
        var arr = new Array(times);
        for (var i = 0; i < arr.length; i++) {
          arr[i] = s;
        }
        return arr.join("");
      }
      exports.repeat = repeat;
      function setInternalSlot(map, pl, field, value) {
        if (!map.get(pl)) {
          map.set(pl, /* @__PURE__ */ Object.create(null));
        }
        var slots = map.get(pl);
        slots[field] = value;
      }
      exports.setInternalSlot = setInternalSlot;
      function setMultiInternalSlots(map, pl, props) {
        for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
          var k = _a[_i];
          setInternalSlot(map, pl, k, props[k]);
        }
      }
      exports.setMultiInternalSlots = setMultiInternalSlots;
      function getInternalSlot(map, pl, field) {
        return getMultiInternalSlots(map, pl, field)[field];
      }
      exports.getInternalSlot = getInternalSlot;
      function getMultiInternalSlots(map, pl) {
        var fields = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          fields[_i - 2] = arguments[_i];
        }
        var slots = map.get(pl);
        if (!slots) {
          throw new TypeError("".concat(pl, " InternalSlot has not been initialized"));
        }
        return fields.reduce(function(all, f) {
          all[f] = slots[f];
          return all;
        }, /* @__PURE__ */ Object.create(null));
      }
      exports.getMultiInternalSlots = getMultiInternalSlots;
      function isLiteralPart(patternPart) {
        return patternPart.type === "literal";
      }
      exports.isLiteralPart = isLiteralPart;
      function defineProperty(target, name, _a) {
        var value = _a.value;
        Object.defineProperty(target, name, {
          configurable: true,
          enumerable: false,
          writable: true,
          value: value
        });
      }
      exports.defineProperty = defineProperty;
      exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;
      function invariant3(condition, message, Err) {
        if (Err === void 0) {
          Err = Error;
        }
        if (!condition) {
          throw new Err(message);
        }
      }
      exports.invariant = invariant3;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/ComputeExponentForMagnitude.js
  var require_ComputeExponentForMagnitude = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/ComputeExponentForMagnitude.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ComputeExponentForMagnitude = void 0;
      function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {
        var getInternalSlots = _a.getInternalSlots;
        var internalSlots = getInternalSlots(numberFormat);
        var notation = internalSlots.notation, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;
        switch (notation) {
          case "standard":
            return 0;
          case "scientific":
            return magnitude;
          case "engineering":
            return Math.floor(magnitude / 3) * 3;
          default: {
            var compactDisplay = internalSlots.compactDisplay, style = internalSlots.style, currencyDisplay = internalSlots.currencyDisplay;
            var thresholdMap = void 0;
            if (style === "currency" && currencyDisplay !== "name") {
              var currency = dataLocaleData.numbers.currency[numberingSystem] || dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];
              thresholdMap = currency.short;
            } else {
              var decimal = dataLocaleData.numbers.decimal[numberingSystem] || dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];
              thresholdMap = compactDisplay === "long" ? decimal.long : decimal.short;
            }
            if (!thresholdMap) {
              return 0;
            }
            var num = String(Math.pow(10, magnitude));
            var thresholds = Object.keys(thresholdMap);
            if (num < thresholds[0]) {
              return 0;
            }
            if (num > thresholds[thresholds.length - 1]) {
              return thresholds[thresholds.length - 1].length - 1;
            }
            var i = thresholds.indexOf(num);
            if (i === -1) {
              return 0;
            }
            var magnitudeKey = thresholds[i];
            var compactPattern = thresholdMap[magnitudeKey].other;
            if (compactPattern === "0") {
              return 0;
            }
            return magnitudeKey.length - thresholdMap[magnitudeKey].other.match(/0+/)[0].length;
          }
        }
      }
      exports.ComputeExponentForMagnitude = ComputeExponentForMagnitude;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/ToRawPrecision.js
  var require_ToRawPrecision = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/ToRawPrecision.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ToRawPrecision = void 0;
      var utils_1 = require_utils();
      function ToRawPrecision(x, minPrecision, maxPrecision) {
        var p = maxPrecision;
        var m;
        var e;
        var xFinal;
        if (x === 0) {
          m = (0, utils_1.repeat)("0", p);
          e = 0;
          xFinal = 0;
        } else {
          var xToString = x.toString();
          var xToStringExponentIndex = xToString.indexOf("e");
          var _a = xToString.split("e"), xToStringMantissa = _a[0], xToStringExponent = _a[1];
          var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace(".", "");
          if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {
            e = +xToStringExponent;
            m = xToStringMantissaWithoutDecimalPoint + (0, utils_1.repeat)("0", p - xToStringMantissaWithoutDecimalPoint.length);
            xFinal = x;
          } else {
            e = (0, utils_1.getMagnitude)(x);
            var decimalPlaceOffset = e - p + 1;
            var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset));
            if (adjustDecimalPlace(n, p - 1) >= 10) {
              e = e + 1;
              n = Math.floor(n / 10);
            }
            m = n.toString();
            xFinal = adjustDecimalPlace(n, p - 1 - e);
          }
        }
        var int;
        if (e >= p - 1) {
          m = m + (0, utils_1.repeat)("0", e - p + 1);
          int = e + 1;
        } else if (e >= 0) {
          m = "".concat(m.slice(0, e + 1), ".").concat(m.slice(e + 1));
          int = e + 1;
        } else {
          m = "0.".concat((0, utils_1.repeat)("0", -e - 1)).concat(m);
          int = 1;
        }
        if (m.indexOf(".") >= 0 && maxPrecision > minPrecision) {
          var cut = maxPrecision - minPrecision;
          while (cut > 0 && m[m.length - 1] === "0") {
            m = m.slice(0, -1);
            cut--;
          }
          if (m[m.length - 1] === ".") {
            m = m.slice(0, -1);
          }
        }
        return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };
        function adjustDecimalPlace(x2, magnitude) {
          return magnitude < 0 ? x2 * Math.pow(10, -magnitude) : x2 / Math.pow(10, magnitude);
        }
      }
      exports.ToRawPrecision = ToRawPrecision;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/ToRawFixed.js
  var require_ToRawFixed = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/ToRawFixed.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ToRawFixed = void 0;
      var utils_1 = require_utils();
      function ToRawFixed(x, minFraction, maxFraction) {
        var f = maxFraction;
        var n = Math.round(x * Math.pow(10, f));
        var xFinal = n / Math.pow(10, f);
        var m;
        if (n < 1e21) {
          m = n.toString();
        } else {
          m = n.toString();
          var _a = m.split("e"), mantissa = _a[0], exponent = _a[1];
          m = mantissa.replace(".", "");
          m = m + (0, utils_1.repeat)("0", Math.max(+exponent - m.length + 1, 0));
        }
        var int;
        if (f !== 0) {
          var k = m.length;
          if (k <= f) {
            var z = (0, utils_1.repeat)("0", f + 1 - k);
            m = z + m;
            k = f + 1;
          }
          var a = m.slice(0, k - f);
          var b = m.slice(k - f);
          m = "".concat(a, ".").concat(b);
          int = a.length;
        } else {
          int = m.length;
        }
        var cut = maxFraction - minFraction;
        while (cut > 0 && m[m.length - 1] === "0") {
          m = m.slice(0, -1);
          cut--;
        }
        if (m[m.length - 1] === ".") {
          m = m.slice(0, -1);
        }
        return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };
      }
      exports.ToRawFixed = ToRawFixed;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/FormatNumericToString.js
  var require_FormatNumericToString = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/FormatNumericToString.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FormatNumericToString = void 0;
      var _262_1 = require__();
      var ToRawPrecision_1 = require_ToRawPrecision();
      var utils_1 = require_utils();
      var ToRawFixed_1 = require_ToRawFixed();
      function FormatNumericToString(intlObject, x) {
        var isNegative = x < 0 || (0, _262_1.SameValue)(x, -0);
        if (isNegative) {
          x = -x;
        }
        var result;
        var rourndingType = intlObject.roundingType;
        switch (rourndingType) {
          case "significantDigits":
            result = (0, ToRawPrecision_1.ToRawPrecision)(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);
            break;
          case "fractionDigits":
            result = (0, ToRawFixed_1.ToRawFixed)(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);
            break;
          default:
            result = (0, ToRawPrecision_1.ToRawPrecision)(x, 1, 2);
            if (result.integerDigitsCount > 1) {
              result = (0, ToRawFixed_1.ToRawFixed)(x, 0, 0);
            }
            break;
        }
        x = result.roundedNumber;
        var string = result.formattedString;
        var int = result.integerDigitsCount;
        var minInteger = intlObject.minimumIntegerDigits;
        if (int < minInteger) {
          var forwardZeros = (0, utils_1.repeat)("0", minInteger - int);
          string = forwardZeros + string;
        }
        if (isNegative) {
          x = -x;
        }
        return { roundedNumber: x, formattedString: string };
      }
      exports.FormatNumericToString = FormatNumericToString;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/ComputeExponent.js
  var require_ComputeExponent = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/ComputeExponent.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ComputeExponent = void 0;
      var utils_1 = require_utils();
      var ComputeExponentForMagnitude_1 = require_ComputeExponentForMagnitude();
      var FormatNumericToString_1 = require_FormatNumericToString();
      function ComputeExponent(numberFormat, x, _a) {
        var getInternalSlots = _a.getInternalSlots;
        if (x === 0) {
          return [0, 0];
        }
        if (x < 0) {
          x = -x;
        }
        var magnitude = (0, utils_1.getMagnitude)(x);
        var exponent = (0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude, {
          getInternalSlots: getInternalSlots
        });
        x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
        var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(getInternalSlots(numberFormat), x);
        if (formatNumberResult.roundedNumber === 0) {
          return [exponent, magnitude];
        }
        var newMagnitude = (0, utils_1.getMagnitude)(formatNumberResult.roundedNumber);
        if (newMagnitude === magnitude - exponent) {
          return [exponent, magnitude];
        }
        return [
          (0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude + 1, {
            getInternalSlots: getInternalSlots
          }),
          magnitude + 1
        ];
      }
      exports.ComputeExponent = ComputeExponent;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/CurrencyDigits.js
  var require_CurrencyDigits = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/CurrencyDigits.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CurrencyDigits = void 0;
      var _262_1 = require__();
      function CurrencyDigits(c, _a) {
        var currencyDigitsData = _a.currencyDigitsData;
        return (0, _262_1.HasOwnProperty)(currencyDigitsData, c) ? currencyDigitsData[c] : 2;
      }
      exports.CurrencyDigits = CurrencyDigits;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/digit-mapping.generated.js
  var require_digit_mapping_generated = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/digit-mapping.generated.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.digitMapping = void 0;
      exports.digitMapping = { "adlm": ["\uD83A\uDD50", "\uD83A\uDD51", "\uD83A\uDD52", "\uD83A\uDD53", "\uD83A\uDD54", "\uD83A\uDD55", "\uD83A\uDD56", "\uD83A\uDD57", "\uD83A\uDD58", "\uD83A\uDD59"], "ahom": ["\uD805\uDF30", "\uD805\uDF31", "\uD805\uDF32", "\uD805\uDF33", "\uD805\uDF34", "\uD805\uDF35", "\uD805\uDF36", "\uD805\uDF37", "\uD805\uDF38", "\uD805\uDF39"], "arab": ["\u0660", "\u0661", "\u0662", "\u0663", "\u0664", "\u0665", "\u0666", "\u0667", "\u0668", "\u0669"], "arabext": ["\u06F0", "\u06F1", "\u06F2", "\u06F3", "\u06F4", "\u06F5", "\u06F6", "\u06F7", "\u06F8", "\u06F9"], "bali": ["\u1B50", "\u1B51", "\u1B52", "\u1B53", "\u1B54", "\u1B55", "\u1B56", "\u1B57", "\u1B58", "\u1B59"], "beng": ["\u09E6", "\u09E7", "\u09E8", "\u09E9", "\u09EA", "\u09EB", "\u09EC", "\u09ED", "\u09EE", "\u09EF"], "bhks": ["\uD807\uDC50", "\uD807\uDC51", "\uD807\uDC52", "\uD807\uDC53", "\uD807\uDC54", "\uD807\uDC55", "\uD807\uDC56", "\uD807\uDC57", "\uD807\uDC58", "\uD807\uDC59"], "brah": ["\uD804\uDC66", "\uD804\uDC67", "\uD804\uDC68", "\uD804\uDC69", "\uD804\uDC6A", "\uD804\uDC6B", "\uD804\uDC6C", "\uD804\uDC6D", "\uD804\uDC6E", "\uD804\uDC6F"], "cakm": ["\uD804\uDD36", "\uD804\uDD37", "\uD804\uDD38", "\uD804\uDD39", "\uD804\uDD3A", "\uD804\uDD3B", "\uD804\uDD3C", "\uD804\uDD3D", "\uD804\uDD3E", "\uD804\uDD3F"], "cham": ["\uAA50", "\uAA51", "\uAA52", "\uAA53", "\uAA54", "\uAA55", "\uAA56", "\uAA57", "\uAA58", "\uAA59"], "deva": ["\u0966", "\u0967", "\u0968", "\u0969", "\u096A", "\u096B", "\u096C", "\u096D", "\u096E", "\u096F"], "diak": ["\uD806\uDD50", "\uD806\uDD51", "\uD806\uDD52", "\uD806\uDD53", "\uD806\uDD54", "\uD806\uDD55", "\uD806\uDD56", "\uD806\uDD57", "\uD806\uDD58", "\uD806\uDD59"], "fullwide": ["\uFF10", "\uFF11", "\uFF12", "\uFF13", "\uFF14", "\uFF15", "\uFF16", "\uFF17", "\uFF18", "\uFF19"], "gong": ["\uD807\uDDA0", "\uD807\uDDA1", "\uD807\uDDA2", "\uD807\uDDA3", "\uD807\uDDA4", "\uD807\uDDA5", "\uD807\uDDA6", "\uD807\uDDA7", "\uD807\uDDA8", "\uD807\uDDA9"], "gonm": ["\uD807\uDD50", "\uD807\uDD51", "\uD807\uDD52", "\uD807\uDD53", "\uD807\uDD54", "\uD807\uDD55", "\uD807\uDD56", "\uD807\uDD57", "\uD807\uDD58", "\uD807\uDD59"], "gujr": ["\u0AE6", "\u0AE7", "\u0AE8", "\u0AE9", "\u0AEA", "\u0AEB", "\u0AEC", "\u0AED", "\u0AEE", "\u0AEF"], "guru": ["\u0A66", "\u0A67", "\u0A68", "\u0A69", "\u0A6A", "\u0A6B", "\u0A6C", "\u0A6D", "\u0A6E", "\u0A6F"], "hanidec": ["\u3007", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u4E03", "\u516B", "\u4E5D"], "hmng": ["\uD81A\uDF50", "\uD81A\uDF51", "\uD81A\uDF52", "\uD81A\uDF53", "\uD81A\uDF54", "\uD81A\uDF55", "\uD81A\uDF56", "\uD81A\uDF57", "\uD81A\uDF58", "\uD81A\uDF59"], "hmnp": ["\uD838\uDD40", "\uD838\uDD41", "\uD838\uDD42", "\uD838\uDD43", "\uD838\uDD44", "\uD838\uDD45", "\uD838\uDD46", "\uD838\uDD47", "\uD838\uDD48", "\uD838\uDD49"], "java": ["\uA9D0", "\uA9D1", "\uA9D2", "\uA9D3", "\uA9D4", "\uA9D5", "\uA9D6", "\uA9D7", "\uA9D8", "\uA9D9"], "kali": ["\uA900", "\uA901", "\uA902", "\uA903", "\uA904", "\uA905", "\uA906", "\uA907", "\uA908", "\uA909"], "khmr": ["\u17E0", "\u17E1", "\u17E2", "\u17E3", "\u17E4", "\u17E5", "\u17E6", "\u17E7", "\u17E8", "\u17E9"], "knda": ["\u0CE6", "\u0CE7", "\u0CE8", "\u0CE9", "\u0CEA", "\u0CEB", "\u0CEC", "\u0CED", "\u0CEE", "\u0CEF"], "lana": ["\u1A80", "\u1A81", "\u1A82", "\u1A83", "\u1A84", "\u1A85", "\u1A86", "\u1A87", "\u1A88", "\u1A89"], "lanatham": ["\u1A90", "\u1A91", "\u1A92", "\u1A93", "\u1A94", "\u1A95", "\u1A96", "\u1A97", "\u1A98", "\u1A99"], "laoo": ["\u0ED0", "\u0ED1", "\u0ED2", "\u0ED3", "\u0ED4", "\u0ED5", "\u0ED6", "\u0ED7", "\u0ED8", "\u0ED9"], "lepc": ["\u1A90", "\u1A91", "\u1A92", "\u1A93", "\u1A94", "\u1A95", "\u1A96", "\u1A97", "\u1A98", "\u1A99"], "limb": ["\u1946", "\u1947", "\u1948", "\u1949", "\u194A", "\u194B", "\u194C", "\u194D", "\u194E", "\u194F"], "mathbold": ["\uD835\uDFCE", "\uD835\uDFCF", "\uD835\uDFD0", "\uD835\uDFD1", "\uD835\uDFD2", "\uD835\uDFD3", "\uD835\uDFD4", "\uD835\uDFD5", "\uD835\uDFD6", "\uD835\uDFD7"], "mathdbl": ["\uD835\uDFD8", "\uD835\uDFD9", "\uD835\uDFDA", "\uD835\uDFDB", "\uD835\uDFDC", "\uD835\uDFDD", "\uD835\uDFDE", "\uD835\uDFDF", "\uD835\uDFE0", "\uD835\uDFE1"], "mathmono": ["\uD835\uDFF6", "\uD835\uDFF7", "\uD835\uDFF8", "\uD835\uDFF9", "\uD835\uDFFA", "\uD835\uDFFB", "\uD835\uDFFC", "\uD835\uDFFD", "\uD835\uDFFE", "\uD835\uDFFF"], "mathsanb": ["\uD835\uDFEC", "\uD835\uDFED", "\uD835\uDFEE", "\uD835\uDFEF", "\uD835\uDFF0", "\uD835\uDFF1", "\uD835\uDFF2", "\uD835\uDFF3", "\uD835\uDFF4", "\uD835\uDFF5"], "mathsans": ["\uD835\uDFE2", "\uD835\uDFE3", "\uD835\uDFE4", "\uD835\uDFE5", "\uD835\uDFE6", "\uD835\uDFE7", "\uD835\uDFE8", "\uD835\uDFE9", "\uD835\uDFEA", "\uD835\uDFEB"], "mlym": ["\u0D66", "\u0D67", "\u0D68", "\u0D69", "\u0D6A", "\u0D6B", "\u0D6C", "\u0D6D", "\u0D6E", "\u0D6F"], "modi": ["\uD805\uDE50", "\uD805\uDE51", "\uD805\uDE52", "\uD805\uDE53", "\uD805\uDE54", "\uD805\uDE55", "\uD805\uDE56", "\uD805\uDE57", "\uD805\uDE58", "\uD805\uDE59"], "mong": ["\u1810", "\u1811", "\u1812", "\u1813", "\u1814", "\u1815", "\u1816", "\u1817", "\u1818", "\u1819"], "mroo": ["\uD81A\uDE60", "\uD81A\uDE61", "\uD81A\uDE62", "\uD81A\uDE63", "\uD81A\uDE64", "\uD81A\uDE65", "\uD81A\uDE66", "\uD81A\uDE67", "\uD81A\uDE68", "\uD81A\uDE69"], "mtei": ["\uABF0", "\uABF1", "\uABF2", "\uABF3", "\uABF4", "\uABF5", "\uABF6", "\uABF7", "\uABF8", "\uABF9"], "mymr": ["\u1040", "\u1041", "\u1042", "\u1043", "\u1044", "\u1045", "\u1046", "\u1047", "\u1048", "\u1049"], "mymrshan": ["\u1090", "\u1091", "\u1092", "\u1093", "\u1094", "\u1095", "\u1096", "\u1097", "\u1098", "\u1099"], "mymrtlng": ["\uA9F0", "\uA9F1", "\uA9F2", "\uA9F3", "\uA9F4", "\uA9F5", "\uA9F6", "\uA9F7", "\uA9F8", "\uA9F9"], "newa": ["\uD805\uDC50", "\uD805\uDC51", "\uD805\uDC52", "\uD805\uDC53", "\uD805\uDC54", "\uD805\uDC55", "\uD805\uDC56", "\uD805\uDC57", "\uD805\uDC58", "\uD805\uDC59"], "nkoo": ["\u07C0", "\u07C1", "\u07C2", "\u07C3", "\u07C4", "\u07C5", "\u07C6", "\u07C7", "\u07C8", "\u07C9"], "olck": ["\u1C50", "\u1C51", "\u1C52", "\u1C53", "\u1C54", "\u1C55", "\u1C56", "\u1C57", "\u1C58", "\u1C59"], "orya": ["\u0B66", "\u0B67", "\u0B68", "\u0B69", "\u0B6A", "\u0B6B", "\u0B6C", "\u0B6D", "\u0B6E", "\u0B6F"], "osma": ["\uD801\uDCA0", "\uD801\uDCA1", "\uD801\uDCA2", "\uD801\uDCA3", "\uD801\uDCA4", "\uD801\uDCA5", "\uD801\uDCA6", "\uD801\uDCA7", "\uD801\uDCA8", "\uD801\uDCA9"], "rohg": ["\uD803\uDD30", "\uD803\uDD31", "\uD803\uDD32", "\uD803\uDD33", "\uD803\uDD34", "\uD803\uDD35", "\uD803\uDD36", "\uD803\uDD37", "\uD803\uDD38", "\uD803\uDD39"], "saur": ["\uA8D0", "\uA8D1", "\uA8D2", "\uA8D3", "\uA8D4", "\uA8D5", "\uA8D6", "\uA8D7", "\uA8D8", "\uA8D9"], "segment": ["\uD83E\uDFF0", "\uD83E\uDFF1", "\uD83E\uDFF2", "\uD83E\uDFF3", "\uD83E\uDFF4", "\uD83E\uDFF5", "\uD83E\uDFF6", "\uD83E\uDFF7", "\uD83E\uDFF8", "\uD83E\uDFF9"], "shrd": ["\uD804\uDDD0", "\uD804\uDDD1", "\uD804\uDDD2", "\uD804\uDDD3", "\uD804\uDDD4", "\uD804\uDDD5", "\uD804\uDDD6", "\uD804\uDDD7", "\uD804\uDDD8", "\uD804\uDDD9"], "sind": ["\uD804\uDEF0", "\uD804\uDEF1", "\uD804\uDEF2", "\uD804\uDEF3", "\uD804\uDEF4", "\uD804\uDEF5", "\uD804\uDEF6", "\uD804\uDEF7", "\uD804\uDEF8", "\uD804\uDEF9"], "sinh": ["\u0DE6", "\u0DE7", "\u0DE8", "\u0DE9", "\u0DEA", "\u0DEB", "\u0DEC", "\u0DED", "\u0DEE", "\u0DEF"], "sora": ["\uD804\uDCF0", "\uD804\uDCF1", "\uD804\uDCF2", "\uD804\uDCF3", "\uD804\uDCF4", "\uD804\uDCF5", "\uD804\uDCF6", "\uD804\uDCF7", "\uD804\uDCF8", "\uD804\uDCF9"], "sund": ["\u1BB0", "\u1BB1", "\u1BB2", "\u1BB3", "\u1BB4", "\u1BB5", "\u1BB6", "\u1BB7", "\u1BB8", "\u1BB9"], "takr": ["\uD805\uDEC0", "\uD805\uDEC1", "\uD805\uDEC2", "\uD805\uDEC3", "\uD805\uDEC4", "\uD805\uDEC5", "\uD805\uDEC6", "\uD805\uDEC7", "\uD805\uDEC8", "\uD805\uDEC9"], "talu": ["\u19D0", "\u19D1", "\u19D2", "\u19D3", "\u19D4", "\u19D5", "\u19D6", "\u19D7", "\u19D8", "\u19D9"], "tamldec": ["\u0BE6", "\u0BE7", "\u0BE8", "\u0BE9", "\u0BEA", "\u0BEB", "\u0BEC", "\u0BED", "\u0BEE", "\u0BEF"], "telu": ["\u0C66", "\u0C67", "\u0C68", "\u0C69", "\u0C6A", "\u0C6B", "\u0C6C", "\u0C6D", "\u0C6E", "\u0C6F"], "thai": ["\u0E50", "\u0E51", "\u0E52", "\u0E53", "\u0E54", "\u0E55", "\u0E56", "\u0E57", "\u0E58", "\u0E59"], "tibt": ["\u0F20", "\u0F21", "\u0F22", "\u0F23", "\u0F24", "\u0F25", "\u0F26", "\u0F27", "\u0F28", "\u0F29"], "tirh": ["\uD805\uDCD0", "\uD805\uDCD1", "\uD805\uDCD2", "\uD805\uDCD3", "\uD805\uDCD4", "\uD805\uDCD5", "\uD805\uDCD6", "\uD805\uDCD7", "\uD805\uDCD8", "\uD805\uDCD9"], "vaii": ["\u1620", "\u1621", "\u1622", "\u1623", "\u1624", "\u1625", "\u1626", "\u1627", "\u1628", "\u1629"], "wara": ["\uD806\uDCE0", "\uD806\uDCE1", "\uD806\uDCE2", "\uD806\uDCE3", "\uD806\uDCE4", "\uD806\uDCE5", "\uD806\uDCE6", "\uD806\uDCE7", "\uD806\uDCE8", "\uD806\uDCE9"], "wcho": ["\uD838\uDEF0", "\uD838\uDEF1", "\uD838\uDEF2", "\uD838\uDEF3", "\uD838\uDEF4", "\uD838\uDEF5", "\uD838\uDEF6", "\uD838\uDEF7", "\uD838\uDEF8", "\uD838\uDEF9"] };
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/regex.generated.js
  var require_regex_generated = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/regex.generated.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.S_UNICODE_REGEX = void 0;
      exports.S_UNICODE_REGEX = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]/;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/format_to_parts.js
  var require_format_to_parts = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/format_to_parts.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var ToRawFixed_1 = require_ToRawFixed();
      var digit_mapping_generated_1 = require_digit_mapping_generated();
      var regex_generated_1 = require_regex_generated();
      var CARET_S_UNICODE_REGEX = new RegExp("^".concat(regex_generated_1.S_UNICODE_REGEX.source));
      var S_DOLLAR_UNICODE_REGEX = new RegExp("".concat(regex_generated_1.S_UNICODE_REGEX.source, "$"));
      var CLDR_NUMBER_PATTERN = /[#0](?:[\.,][#0]+)*/g;
      function formatToParts(numberResult, data, pl, options) {
        var sign = numberResult.sign, exponent = numberResult.exponent, magnitude = numberResult.magnitude;
        var notation = options.notation, style = options.style, numberingSystem = options.numberingSystem;
        var defaultNumberingSystem = data.numbers.nu[0];
        var compactNumberPattern = null;
        if (notation === "compact" && magnitude) {
          compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);
        }
        var nonNameCurrencyPart;
        if (style === "currency" && options.currencyDisplay !== "name") {
          var byCurrencyDisplay = data.currencies[options.currency];
          if (byCurrencyDisplay) {
            switch (options.currencyDisplay) {
              case "code":
                nonNameCurrencyPart = options.currency;
                break;
              case "symbol":
                nonNameCurrencyPart = byCurrencyDisplay.symbol;
                break;
              default:
                nonNameCurrencyPart = byCurrencyDisplay.narrow;
                break;
            }
          } else {
            nonNameCurrencyPart = options.currency;
          }
        }
        var numberPattern;
        if (!compactNumberPattern) {
          if (style === "decimal" || style === "unit" || style === "currency" && options.currencyDisplay === "name") {
            var decimalData = data.numbers.decimal[numberingSystem] || data.numbers.decimal[defaultNumberingSystem];
            numberPattern = getPatternForSign(decimalData.standard, sign);
          } else if (style === "currency") {
            var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem];
            numberPattern = getPatternForSign(currencyData[options.currencySign], sign);
          } else {
            var percentPattern = data.numbers.percent[numberingSystem] || data.numbers.percent[defaultNumberingSystem];
            numberPattern = getPatternForSign(percentPattern, sign);
          }
        } else {
          numberPattern = compactNumberPattern;
        }
        var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0];
        numberPattern = numberPattern.replace(CLDR_NUMBER_PATTERN, "{0}").replace(/'(.)'/g, "$1");
        if (style === "currency" && options.currencyDisplay !== "name") {
          var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem];
          var afterCurrency = currencyData.currencySpacing.afterInsertBetween;
          if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {
            numberPattern = numberPattern.replace("\xA4{0}", "\xA4".concat(afterCurrency, "{0}"));
          }
          var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;
          if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {
            numberPattern = numberPattern.replace("{0}\xA4", "{0}".concat(beforeCurrency, "\xA4"));
          }
        }
        var numberPatternParts = numberPattern.split(/({c:[^}]+}|\{0\}|[¤%\-\+])/g);
        var numberParts = [];
        var symbols = data.numbers.symbols[numberingSystem] || data.numbers.symbols[defaultNumberingSystem];
        for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {
          var part = numberPatternParts_1[_i];
          if (!part) {
            continue;
          }
          switch (part) {
            case "{0}": {
              numberParts.push.apply(numberParts, paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, !compactNumberPattern && options.useGrouping, decimalNumberPattern));
              break;
            }
            case "-":
              numberParts.push({ type: "minusSign", value: symbols.minusSign });
              break;
            case "+":
              numberParts.push({ type: "plusSign", value: symbols.plusSign });
              break;
            case "%":
              numberParts.push({ type: "percentSign", value: symbols.percentSign });
              break;
            case "\xA4":
              numberParts.push({ type: "currency", value: nonNameCurrencyPart });
              break;
            default:
              if (/^\{c:/.test(part)) {
                numberParts.push({
                  type: "compact",
                  value: part.substring(3, part.length - 1)
                });
              } else {
                numberParts.push({ type: "literal", value: part });
              }
              break;
          }
        }
        switch (style) {
          case "currency": {
            if (options.currencyDisplay === "name") {
              var unitPattern = (data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]).unitPattern;
              var unitName = void 0;
              var currencyNameData = data.currencies[options.currency];
              if (currencyNameData) {
                unitName = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), currencyNameData.displayName);
              } else {
                unitName = options.currency;
              }
              var unitPatternParts = unitPattern.split(/(\{[01]\})/g);
              var result = [];
              for (var _a = 0, unitPatternParts_1 = unitPatternParts; _a < unitPatternParts_1.length; _a++) {
                var part = unitPatternParts_1[_a];
                switch (part) {
                  case "{0}":
                    result.push.apply(result, numberParts);
                    break;
                  case "{1}":
                    result.push({ type: "currency", value: unitName });
                    break;
                  default:
                    if (part) {
                      result.push({ type: "literal", value: part });
                    }
                    break;
                }
              }
              return result;
            } else {
              return numberParts;
            }
          }
          case "unit": {
            var unit = options.unit, unitDisplay = options.unitDisplay;
            var unitData = data.units.simple[unit];
            var unitPattern = void 0;
            if (unitData) {
              unitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[unit][unitDisplay]);
            } else {
              var _b = unit.split("-per-"), numeratorUnit = _b[0], denominatorUnit = _b[1];
              unitData = data.units.simple[numeratorUnit];
              var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[numeratorUnit][unitDisplay]);
              var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];
              if (perUnitPattern) {
                unitPattern = perUnitPattern.replace("{0}", numeratorUnitPattern);
              } else {
                var perPattern = data.units.compound.per[unitDisplay];
                var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);
                unitPattern = unitPattern = perPattern.replace("{0}", numeratorUnitPattern).replace("{1}", denominatorPattern.replace("{0}", ""));
              }
            }
            var result = [];
            for (var _c = 0, _d = unitPattern.split(/(\s*\{0\}\s*)/); _c < _d.length; _c++) {
              var part = _d[_c];
              var interpolateMatch = /^(\s*)\{0\}(\s*)$/.exec(part);
              if (interpolateMatch) {
                if (interpolateMatch[1]) {
                  result.push({ type: "literal", value: interpolateMatch[1] });
                }
                result.push.apply(result, numberParts);
                if (interpolateMatch[2]) {
                  result.push({ type: "literal", value: interpolateMatch[2] });
                }
              } else if (part) {
                result.push({ type: "unit", value: part });
              }
            }
            return result;
          }
          default:
            return numberParts;
        }
      }
      exports.default = formatToParts;
      function paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping, decimalNumberPattern) {
        var result = [];
        var n = numberResult.formattedString, x = numberResult.roundedNumber;
        if (isNaN(x)) {
          return [{ type: "nan", value: n }];
        } else if (!isFinite(x)) {
          return [{ type: "infinity", value: n }];
        }
        var digitReplacementTable = digit_mapping_generated_1.digitMapping[numberingSystem];
        if (digitReplacementTable) {
          n = n.replace(/\d/g, function(digit) {
            return digitReplacementTable[+digit] || digit;
          });
        }
        var decimalSepIndex = n.indexOf(".");
        var integer;
        var fraction;
        if (decimalSepIndex > 0) {
          integer = n.slice(0, decimalSepIndex);
          fraction = n.slice(decimalSepIndex + 1);
        } else {
          integer = n;
        }
        if (useGrouping && (notation !== "compact" || x >= 1e4)) {
          var groupSepSymbol = symbols.group;
          var groups = [];
          var integerNumberPattern = decimalNumberPattern.split(".")[0];
          var patternGroups = integerNumberPattern.split(",");
          var primaryGroupingSize = 3;
          var secondaryGroupingSize = 3;
          if (patternGroups.length > 1) {
            primaryGroupingSize = patternGroups[patternGroups.length - 1].length;
          }
          if (patternGroups.length > 2) {
            secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;
          }
          var i = integer.length - primaryGroupingSize;
          if (i > 0) {
            groups.push(integer.slice(i, i + primaryGroupingSize));
            for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {
              groups.push(integer.slice(i, i + secondaryGroupingSize));
            }
            groups.push(integer.slice(0, i + secondaryGroupingSize));
          } else {
            groups.push(integer);
          }
          while (groups.length > 0) {
            var integerGroup = groups.pop();
            result.push({ type: "integer", value: integerGroup });
            if (groups.length > 0) {
              result.push({ type: "group", value: groupSepSymbol });
            }
          }
        } else {
          result.push({ type: "integer", value: integer });
        }
        if (fraction !== void 0) {
          result.push({ type: "decimal", value: symbols.decimal }, { type: "fraction", value: fraction });
        }
        if ((notation === "scientific" || notation === "engineering") && isFinite(x)) {
          result.push({ type: "exponentSeparator", value: symbols.exponential });
          if (exponent < 0) {
            result.push({ type: "exponentMinusSign", value: symbols.minusSign });
            exponent = -exponent;
          }
          var exponentResult = (0, ToRawFixed_1.ToRawFixed)(exponent, 0, 0);
          result.push({
            type: "exponentInteger",
            value: exponentResult.formattedString
          });
        }
        return result;
      }
      function getPatternForSign(pattern, sign) {
        if (pattern.indexOf(";") < 0) {
          pattern = "".concat(pattern, ";-").concat(pattern);
        }
        var _a = pattern.split(";"), zeroPattern = _a[0], negativePattern = _a[1];
        switch (sign) {
          case 0:
            return zeroPattern;
          case -1:
            return negativePattern;
          default:
            return negativePattern.indexOf("-") >= 0 ? negativePattern.replace(/-/g, "+") : "+".concat(zeroPattern);
        }
      }
      function getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {
        var _a;
        var roundedNumber = numberResult.roundedNumber, sign = numberResult.sign, magnitude = numberResult.magnitude;
        var magnitudeKey = String(Math.pow(10, magnitude));
        var defaultNumberingSystem = data.numbers.nu[0];
        var pattern;
        if (style === "currency" && currencyDisplay !== "name") {
          var byNumberingSystem = data.numbers.currency;
          var currencyData = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem];
          var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];
          if (!compactPluralRules) {
            return null;
          }
          pattern = selectPlural(pl, roundedNumber, compactPluralRules);
        } else {
          var byNumberingSystem = data.numbers.decimal;
          var byCompactDisplay = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem];
          var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];
          if (!compactPlaralRule) {
            return null;
          }
          pattern = selectPlural(pl, roundedNumber, compactPlaralRule);
        }
        if (pattern === "0") {
          return null;
        }
        pattern = getPatternForSign(pattern, sign).replace(/([^\s;\-\+\d¤]+)/g, "{c:$1}").replace(/0+/, "0");
        return pattern;
      }
      function selectPlural(pl, x, rules) {
        return rules[pl.select(x)] || rules.other;
      }
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/PartitionNumberPattern.js
  var require_PartitionNumberPattern = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/PartitionNumberPattern.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PartitionNumberPattern = void 0;
      var tslib_1 = require_tslib();
      var FormatNumericToString_1 = require_FormatNumericToString();
      var _262_1 = require__();
      var ComputeExponent_1 = require_ComputeExponent();
      var format_to_parts_1 = (0, tslib_1.__importDefault)(require_format_to_parts());
      function PartitionNumberPattern(numberFormat, x, _a) {
        var _b;
        var getInternalSlots = _a.getInternalSlots;
        var internalSlots = getInternalSlots(numberFormat);
        var pl = internalSlots.pl, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;
        var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];
        var magnitude = 0;
        var exponent = 0;
        var n;
        if (isNaN(x)) {
          n = symbols.nan;
        } else if (!isFinite(x)) {
          n = symbols.infinity;
        } else {
          if (internalSlots.style === "percent") {
            x *= 100;
          }
          ;
          _b = (0, ComputeExponent_1.ComputeExponent)(numberFormat, x, {
            getInternalSlots: getInternalSlots
          }), exponent = _b[0], magnitude = _b[1];
          x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
          var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(internalSlots, x);
          n = formatNumberResult.formattedString;
          x = formatNumberResult.roundedNumber;
        }
        var sign;
        var signDisplay = internalSlots.signDisplay;
        switch (signDisplay) {
          case "never":
            sign = 0;
            break;
          case "auto":
            if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
              sign = 0;
            } else {
              sign = -1;
            }
            break;
          case "always":
            if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
              sign = 1;
            } else {
              sign = -1;
            }
            break;
          default:
            if (x === 0 || isNaN(x)) {
              sign = 0;
            } else if (x > 0) {
              sign = 1;
            } else {
              sign = -1;
            }
        }
        return (0, format_to_parts_1.default)({ roundedNumber: x, formattedString: n, exponent: exponent, magnitude: magnitude, sign: sign }, internalSlots.dataLocaleData, pl, internalSlots);
      }
      exports.PartitionNumberPattern = PartitionNumberPattern;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/FormatNumericToParts.js
  var require_FormatNumericToParts = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/FormatNumericToParts.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FormatNumericToParts = void 0;
      var PartitionNumberPattern_1 = require_PartitionNumberPattern();
      var _262_1 = require__();
      function FormatNumericToParts(nf, x, implDetails) {
        var parts = (0, PartitionNumberPattern_1.PartitionNumberPattern)(nf, x, implDetails);
        var result = (0, _262_1.ArrayCreate)(0);
        for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
          var part = parts_1[_i];
          result.push({
            type: part.type,
            value: part.value
          });
        }
        return result;
      }
      exports.FormatNumericToParts = FormatNumericToParts;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/CanonicalizeLocaleList.js
  var require_CanonicalizeLocaleList2 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/CanonicalizeLocaleList.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CanonicalizeLocaleList = void 0;
      function CanonicalizeLocaleList(locales) {
        return Intl.getCanonicalLocales(locales);
      }
      exports.CanonicalizeLocaleList = CanonicalizeLocaleList;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/utils.js
  var require_utils2 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/utils.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = void 0;
      exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;
      function invariant3(condition, message, Err) {
        if (Err === void 0) {
          Err = Error;
        }
        if (!condition) {
          throw new Err(message);
        }
      }
      exports.invariant = invariant3;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/BestAvailableLocale.js
  var require_BestAvailableLocale = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/BestAvailableLocale.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BestAvailableLocale = void 0;
      function BestAvailableLocale(availableLocales, locale) {
        var candidate = locale;
        while (true) {
          if (availableLocales.has(candidate)) {
            return candidate;
          }
          var pos = candidate.lastIndexOf("-");
          if (!~pos) {
            return void 0;
          }
          if (pos >= 2 && candidate[pos - 2] === "-") {
            pos -= 2;
          }
          candidate = candidate.slice(0, pos);
        }
      }
      exports.BestAvailableLocale = BestAvailableLocale;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/LookupMatcher.js
  var require_LookupMatcher = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/LookupMatcher.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LookupMatcher = void 0;
      var utils_1 = require_utils2();
      var BestAvailableLocale_1 = require_BestAvailableLocale();
      function LookupMatcher(availableLocales, requestedLocales, getDefaultLocale) {
        var result = { locale: "" };
        for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
          var locale = requestedLocales_1[_i];
          var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, "");
          var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);
          if (availableLocale) {
            result.locale = availableLocale;
            if (locale !== noExtensionLocale) {
              result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);
            }
            return result;
          }
        }
        result.locale = getDefaultLocale();
        return result;
      }
      exports.LookupMatcher = LookupMatcher;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/BestFitMatcher.js
  var require_BestFitMatcher = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/BestFitMatcher.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BestFitMatcher = void 0;
      var BestAvailableLocale_1 = require_BestAvailableLocale();
      var utils_1 = require_utils2();
      function BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {
        var minimizedAvailableLocaleMap = {};
        var availableLocaleMap = {};
        var canonicalizedLocaleMap = {};
        var minimizedAvailableLocales = /* @__PURE__ */ new Set();
        availableLocales.forEach(function(locale2) {
          var minimizedLocale = new Intl.Locale(locale2).minimize().toString();
          var canonicalizedLocale = Intl.getCanonicalLocales(locale2)[0] || locale2;
          minimizedAvailableLocaleMap[minimizedLocale] = locale2;
          availableLocaleMap[locale2] = locale2;
          canonicalizedLocaleMap[canonicalizedLocale] = locale2;
          minimizedAvailableLocales.add(minimizedLocale);
          minimizedAvailableLocales.add(locale2);
          minimizedAvailableLocales.add(canonicalizedLocale);
        });
        var foundLocale;
        for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
          var l = requestedLocales_1[_i];
          if (foundLocale) {
            break;
          }
          var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, "");
          if (availableLocales.has(noExtensionLocale)) {
            foundLocale = noExtensionLocale;
            break;
          }
          if (minimizedAvailableLocales.has(noExtensionLocale)) {
            foundLocale = noExtensionLocale;
            break;
          }
          var locale = new Intl.Locale(noExtensionLocale);
          var maximizedRequestedLocale = locale.maximize().toString();
          var minimizedRequestedLocale = locale.minimize().toString();
          if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {
            foundLocale = minimizedRequestedLocale;
            break;
          }
          foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);
        }
        if (!foundLocale) {
          return { locale: getDefaultLocale() };
        }
        return {
          locale: availableLocaleMap[foundLocale] || canonicalizedLocaleMap[foundLocale] || minimizedAvailableLocaleMap[foundLocale] || foundLocale
        };
      }
      exports.BestFitMatcher = BestFitMatcher;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/UnicodeExtensionValue.js
  var require_UnicodeExtensionValue = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/UnicodeExtensionValue.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UnicodeExtensionValue = void 0;
      var utils_1 = require_utils2();
      function UnicodeExtensionValue(extension, key) {
        (0, utils_1.invariant)(key.length === 2, "key must have 2 elements");
        var size = extension.length;
        var searchValue = "-".concat(key, "-");
        var pos = extension.indexOf(searchValue);
        if (pos !== -1) {
          var start = pos + 4;
          var end = start;
          var k = start;
          var done = false;
          while (!done) {
            var e = extension.indexOf("-", k);
            var len = void 0;
            if (e === -1) {
              len = size - k;
            } else {
              len = e - k;
            }
            if (len === 2) {
              done = true;
            } else if (e === -1) {
              end = size;
              done = true;
            } else {
              end = e;
              k = e + 1;
            }
          }
          return extension.slice(start, end);
        }
        searchValue = "-".concat(key);
        pos = extension.indexOf(searchValue);
        if (pos !== -1 && pos + 3 === size) {
          return "";
        }
        return void 0;
      }
      exports.UnicodeExtensionValue = UnicodeExtensionValue;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/ResolveLocale.js
  var require_ResolveLocale = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/ResolveLocale.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ResolveLocale = void 0;
      var LookupMatcher_1 = require_LookupMatcher();
      var BestFitMatcher_1 = require_BestFitMatcher();
      var utils_1 = require_utils2();
      var UnicodeExtensionValue_1 = require_UnicodeExtensionValue();
      function ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData, getDefaultLocale) {
        var matcher = options.localeMatcher;
        var r;
        if (matcher === "lookup") {
          r = (0, LookupMatcher_1.LookupMatcher)(availableLocales, requestedLocales, getDefaultLocale);
        } else {
          r = (0, BestFitMatcher_1.BestFitMatcher)(availableLocales, requestedLocales, getDefaultLocale);
        }
        var foundLocale = r.locale;
        var result = { locale: "", dataLocale: foundLocale };
        var supportedExtension = "-u";
        for (var _i = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _i < relevantExtensionKeys_1.length; _i++) {
          var key = relevantExtensionKeys_1[_i];
          (0, utils_1.invariant)(foundLocale in localeData, "Missing locale data for ".concat(foundLocale));
          var foundLocaleData = localeData[foundLocale];
          (0, utils_1.invariant)(typeof foundLocaleData === "object" && foundLocaleData !== null, "locale data ".concat(key, " must be an object"));
          var keyLocaleData = foundLocaleData[key];
          (0, utils_1.invariant)(Array.isArray(keyLocaleData), "keyLocaleData for ".concat(key, " must be an array"));
          var value = keyLocaleData[0];
          (0, utils_1.invariant)(typeof value === "string" || value === null, "value must be string or null but got ".concat(typeof value, " in key ").concat(key));
          var supportedExtensionAddition = "";
          if (r.extension) {
            var requestedValue = (0, UnicodeExtensionValue_1.UnicodeExtensionValue)(r.extension, key);
            if (requestedValue !== void 0) {
              if (requestedValue !== "") {
                if (~keyLocaleData.indexOf(requestedValue)) {
                  value = requestedValue;
                  supportedExtensionAddition = "-".concat(key, "-").concat(value);
                }
              } else if (~requestedValue.indexOf("true")) {
                value = "true";
                supportedExtensionAddition = "-".concat(key);
              }
            }
          }
          if (key in options) {
            var optionsValue = options[key];
            (0, utils_1.invariant)(typeof optionsValue === "string" || typeof optionsValue === "undefined" || optionsValue === null, "optionsValue must be String, Undefined or Null");
            if (~keyLocaleData.indexOf(optionsValue)) {
              if (optionsValue !== value) {
                value = optionsValue;
                supportedExtensionAddition = "";
              }
            }
          }
          result[key] = value;
          supportedExtension += supportedExtensionAddition;
        }
        if (supportedExtension.length > 2) {
          var privateIndex = foundLocale.indexOf("-x-");
          if (privateIndex === -1) {
            foundLocale = foundLocale + supportedExtension;
          } else {
            var preExtension = foundLocale.slice(0, privateIndex);
            var postExtension = foundLocale.slice(privateIndex, foundLocale.length);
            foundLocale = preExtension + supportedExtension + postExtension;
          }
          foundLocale = Intl.getCanonicalLocales(foundLocale)[0];
        }
        result.locale = foundLocale;
        return result;
      }
      exports.ResolveLocale = ResolveLocale;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/LookupSupportedLocales.js
  var require_LookupSupportedLocales = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/abstract/LookupSupportedLocales.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LookupSupportedLocales = void 0;
      var utils_1 = require_utils2();
      var BestAvailableLocale_1 = require_BestAvailableLocale();
      function LookupSupportedLocales(availableLocales, requestedLocales) {
        var subset = [];
        for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
          var locale = requestedLocales_1[_i];
          var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, "");
          var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);
          if (availableLocale) {
            subset.push(availableLocale);
          }
        }
        return subset;
      }
      exports.LookupSupportedLocales = LookupSupportedLocales;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/index.js
  var require_intl_localematcher = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-localematcher/index.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ResolveLocale = exports.LookupSupportedLocales = exports.match = void 0;
      var CanonicalizeLocaleList_1 = require_CanonicalizeLocaleList2();
      var ResolveLocale_1 = require_ResolveLocale();
      function match(requestedLocales, availableLocales, defaultLocale, opts) {
        var locales = availableLocales.reduce(function(all, l) {
          all.add(l);
          return all;
        }, /* @__PURE__ */ new Set());
        return (0, ResolveLocale_1.ResolveLocale)(locales, (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(requestedLocales), {
          localeMatcher: (opts === null || opts === void 0 ? void 0 : opts.algorithm) || "best fit"
        }, [], {}, function() {
          return defaultLocale;
        }).locale;
      }
      exports.match = match;
      var LookupSupportedLocales_1 = require_LookupSupportedLocales();
      Object.defineProperty(exports, "LookupSupportedLocales", { enumerable: true, get: function() {
        return LookupSupportedLocales_1.LookupSupportedLocales;
      } });
      var ResolveLocale_2 = require_ResolveLocale();
      Object.defineProperty(exports, "ResolveLocale", { enumerable: true, get: function() {
        return ResolveLocale_2.ResolveLocale;
      } });
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/SetNumberFormatUnitOptions.js
  var require_SetNumberFormatUnitOptions = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/SetNumberFormatUnitOptions.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SetNumberFormatUnitOptions = void 0;
      var GetOption_1 = require_GetOption();
      var IsWellFormedCurrencyCode_1 = require_IsWellFormedCurrencyCode();
      var IsWellFormedUnitIdentifier_1 = require_IsWellFormedUnitIdentifier();
      function SetNumberFormatUnitOptions(nf, options, _a) {
        if (options === void 0) {
          options = /* @__PURE__ */ Object.create(null);
        }
        var getInternalSlots = _a.getInternalSlots;
        var internalSlots = getInternalSlots(nf);
        var style = (0, GetOption_1.GetOption)(options, "style", "string", ["decimal", "percent", "currency", "unit"], "decimal");
        internalSlots.style = style;
        var currency = (0, GetOption_1.GetOption)(options, "currency", "string", void 0, void 0);
        if (currency !== void 0 && !(0, IsWellFormedCurrencyCode_1.IsWellFormedCurrencyCode)(currency)) {
          throw RangeError("Malformed currency code");
        }
        if (style === "currency" && currency === void 0) {
          throw TypeError("currency cannot be undefined");
        }
        var currencyDisplay = (0, GetOption_1.GetOption)(options, "currencyDisplay", "string", ["code", "symbol", "narrowSymbol", "name"], "symbol");
        var currencySign = (0, GetOption_1.GetOption)(options, "currencySign", "string", ["standard", "accounting"], "standard");
        var unit = (0, GetOption_1.GetOption)(options, "unit", "string", void 0, void 0);
        if (unit !== void 0 && !(0, IsWellFormedUnitIdentifier_1.IsWellFormedUnitIdentifier)(unit)) {
          throw RangeError("Invalid unit argument for Intl.NumberFormat()");
        }
        if (style === "unit" && unit === void 0) {
          throw TypeError("unit cannot be undefined");
        }
        var unitDisplay = (0, GetOption_1.GetOption)(options, "unitDisplay", "string", ["short", "narrow", "long"], "short");
        if (style === "currency") {
          internalSlots.currency = currency.toUpperCase();
          internalSlots.currencyDisplay = currencyDisplay;
          internalSlots.currencySign = currencySign;
        }
        if (style === "unit") {
          internalSlots.unit = unit;
          internalSlots.unitDisplay = unitDisplay;
        }
      }
      exports.SetNumberFormatUnitOptions = SetNumberFormatUnitOptions;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/SetNumberFormatDigitOptions.js
  var require_SetNumberFormatDigitOptions = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/SetNumberFormatDigitOptions.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SetNumberFormatDigitOptions = void 0;
      var GetNumberOption_1 = require_GetNumberOption();
      var DefaultNumberOption_1 = require_DefaultNumberOption();
      function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {
        var mnid = (0, GetNumberOption_1.GetNumberOption)(opts, "minimumIntegerDigits", 1, 21, 1);
        var mnfd = opts.minimumFractionDigits;
        var mxfd = opts.maximumFractionDigits;
        var mnsd = opts.minimumSignificantDigits;
        var mxsd = opts.maximumSignificantDigits;
        internalSlots.minimumIntegerDigits = mnid;
        if (mnsd !== void 0 || mxsd !== void 0) {
          internalSlots.roundingType = "significantDigits";
          mnsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnsd, 1, 21, 1);
          mxsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxsd, mnsd, 21, 21);
          internalSlots.minimumSignificantDigits = mnsd;
          internalSlots.maximumSignificantDigits = mxsd;
        } else if (mnfd !== void 0 || mxfd !== void 0) {
          internalSlots.roundingType = "fractionDigits";
          mnfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnfd, 0, 20, mnfdDefault);
          var mxfdActualDefault = Math.max(mnfd, mxfdDefault);
          mxfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxfd, mnfd, 20, mxfdActualDefault);
          internalSlots.minimumFractionDigits = mnfd;
          internalSlots.maximumFractionDigits = mxfd;
        } else if (notation === "compact") {
          internalSlots.roundingType = "compactRounding";
        } else {
          internalSlots.roundingType = "fractionDigits";
          internalSlots.minimumFractionDigits = mnfdDefault;
          internalSlots.maximumFractionDigits = mxfdDefault;
        }
      }
      exports.SetNumberFormatDigitOptions = SetNumberFormatDigitOptions;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/InitializeNumberFormat.js
  var require_InitializeNumberFormat = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/NumberFormat/InitializeNumberFormat.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InitializeNumberFormat = void 0;
      var CanonicalizeLocaleList_1 = require_CanonicalizeLocaleList();
      var GetOption_1 = require_GetOption();
      var intl_localematcher_1 = require_intl_localematcher();
      var SetNumberFormatUnitOptions_1 = require_SetNumberFormatUnitOptions();
      var CurrencyDigits_1 = require_CurrencyDigits();
      var SetNumberFormatDigitOptions_1 = require_SetNumberFormatDigitOptions();
      var utils_1 = require_utils();
      var CoerceOptionsToObject_1 = require_CoerceOptionsToObject();
      function InitializeNumberFormat(nf, locales, opts, _a) {
        var getInternalSlots = _a.getInternalSlots, localeData = _a.localeData, availableLocales = _a.availableLocales, numberingSystemNames = _a.numberingSystemNames, getDefaultLocale = _a.getDefaultLocale, currencyDigitsData = _a.currencyDigitsData;
        var requestedLocales = (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(locales);
        var options = (0, CoerceOptionsToObject_1.CoerceOptionsToObject)(opts);
        var opt = /* @__PURE__ */ Object.create(null);
        var matcher = (0, GetOption_1.GetOption)(options, "localeMatcher", "string", ["lookup", "best fit"], "best fit");
        opt.localeMatcher = matcher;
        var numberingSystem = (0, GetOption_1.GetOption)(options, "numberingSystem", "string", void 0, void 0);
        if (numberingSystem !== void 0 && numberingSystemNames.indexOf(numberingSystem) < 0) {
          throw RangeError("Invalid numberingSystems: ".concat(numberingSystem));
        }
        opt.nu = numberingSystem;
        var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, ["nu"], localeData, getDefaultLocale);
        var dataLocaleData = localeData[r.dataLocale];
        (0, utils_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(r.dataLocale));
        var internalSlots = getInternalSlots(nf);
        internalSlots.locale = r.locale;
        internalSlots.dataLocale = r.dataLocale;
        internalSlots.numberingSystem = r.nu;
        internalSlots.dataLocaleData = dataLocaleData;
        (0, SetNumberFormatUnitOptions_1.SetNumberFormatUnitOptions)(nf, options, { getInternalSlots: getInternalSlots });
        var style = internalSlots.style;
        var mnfdDefault;
        var mxfdDefault;
        if (style === "currency") {
          var currency = internalSlots.currency;
          var cDigits = (0, CurrencyDigits_1.CurrencyDigits)(currency, { currencyDigitsData: currencyDigitsData });
          mnfdDefault = cDigits;
          mxfdDefault = cDigits;
        } else {
          mnfdDefault = 0;
          mxfdDefault = style === "percent" ? 0 : 3;
        }
        var notation = (0, GetOption_1.GetOption)(options, "notation", "string", ["standard", "scientific", "engineering", "compact"], "standard");
        internalSlots.notation = notation;
        (0, SetNumberFormatDigitOptions_1.SetNumberFormatDigitOptions)(internalSlots, options, mnfdDefault, mxfdDefault, notation);
        var compactDisplay = (0, GetOption_1.GetOption)(options, "compactDisplay", "string", ["short", "long"], "short");
        if (notation === "compact") {
          internalSlots.compactDisplay = compactDisplay;
        }
        var useGrouping = (0, GetOption_1.GetOption)(options, "useGrouping", "boolean", void 0, true);
        internalSlots.useGrouping = useGrouping;
        var signDisplay = (0, GetOption_1.GetOption)(options, "signDisplay", "string", ["auto", "never", "always", "exceptZero"], "auto");
        internalSlots.signDisplay = signDisplay;
        return nf;
      }
      exports.InitializeNumberFormat = InitializeNumberFormat;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/PartitionPattern.js
  var require_PartitionPattern = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/PartitionPattern.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PartitionPattern = void 0;
      var utils_1 = require_utils();
      function PartitionPattern(pattern) {
        var result = [];
        var beginIndex = pattern.indexOf("{");
        var endIndex = 0;
        var nextIndex = 0;
        var length = pattern.length;
        while (beginIndex < pattern.length && beginIndex > -1) {
          endIndex = pattern.indexOf("}", beginIndex);
          (0, utils_1.invariant)(endIndex > beginIndex, "Invalid pattern ".concat(pattern));
          if (beginIndex > nextIndex) {
            result.push({
              type: "literal",
              value: pattern.substring(nextIndex, beginIndex)
            });
          }
          result.push({
            type: pattern.substring(beginIndex + 1, endIndex),
            value: void 0
          });
          nextIndex = endIndex + 1;
          beginIndex = pattern.indexOf("{", nextIndex);
        }
        if (nextIndex < length) {
          result.push({
            type: "literal",
            value: pattern.substring(nextIndex, length)
          });
        }
        return result;
      }
      exports.PartitionPattern = PartitionPattern;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/SupportedLocales.js
  var require_SupportedLocales = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/SupportedLocales.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SupportedLocales = void 0;
      var _262_1 = require__();
      var GetOption_1 = require_GetOption();
      var intl_localematcher_1 = require_intl_localematcher();
      function SupportedLocales(availableLocales, requestedLocales, options) {
        var matcher = "best fit";
        if (options !== void 0) {
          options = (0, _262_1.ToObject)(options);
          matcher = (0, GetOption_1.GetOption)(options, "localeMatcher", "string", ["lookup", "best fit"], "best fit");
        }
        if (matcher === "best fit") {
          return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
        }
        return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
      }
      exports.SupportedLocales = SupportedLocales;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/data.js
  var require_data = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/data.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isMissingLocaleDataError = void 0;
      var tslib_1 = require_tslib();
      var MissingLocaleDataError = function(_super) {
        (0, tslib_1.__extends)(MissingLocaleDataError2, _super);
        function MissingLocaleDataError2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.type = "MISSING_LOCALE_DATA";
          return _this;
        }
        return MissingLocaleDataError2;
      }(Error);
      function isMissingLocaleDataError(e) {
        return e.type === "MISSING_LOCALE_DATA";
      }
      exports.isMissingLocaleDataError = isMissingLocaleDataError;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/relative-time.js
  var require_relative_time = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/relative-time.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/date-time.js
  var require_date_time = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/date-time.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RangePatternType = void 0;
      var RangePatternType;
      (function(RangePatternType2) {
        RangePatternType2["startRange"] = "startRange";
        RangePatternType2["shared"] = "shared";
        RangePatternType2["endRange"] = "endRange";
      })(RangePatternType = exports.RangePatternType || (exports.RangePatternType = {}));
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/list.js
  var require_list = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/list.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/plural-rules.js
  var require_plural_rules = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/plural-rules.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/number.js
  var require_number = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/number.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/displaynames.js
  var require_displaynames = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/types/displaynames.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/index.js
  var require_ecma402_abstract = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/ecma402-abstract/index.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.invariant = exports.isMissingLocaleDataError = exports.defineProperty = exports.getMagnitude = exports.setMultiInternalSlots = exports.setInternalSlot = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports._formatToParts = void 0;
      var tslib_1 = require_tslib();
      (0, tslib_1.__exportStar)(require_CanonicalizeLocaleList(), exports);
      (0, tslib_1.__exportStar)(require_CanonicalizeTimeZoneName(), exports);
      (0, tslib_1.__exportStar)(require_CoerceOptionsToObject(), exports);
      (0, tslib_1.__exportStar)(require_GetNumberOption(), exports);
      (0, tslib_1.__exportStar)(require_GetOption(), exports);
      (0, tslib_1.__exportStar)(require_GetOptionsObject(), exports);
      (0, tslib_1.__exportStar)(require_IsSanctionedSimpleUnitIdentifier(), exports);
      (0, tslib_1.__exportStar)(require_IsValidTimeZoneName(), exports);
      (0, tslib_1.__exportStar)(require_IsWellFormedCurrencyCode(), exports);
      (0, tslib_1.__exportStar)(require_IsWellFormedUnitIdentifier(), exports);
      (0, tslib_1.__exportStar)(require_ComputeExponent(), exports);
      (0, tslib_1.__exportStar)(require_ComputeExponentForMagnitude(), exports);
      (0, tslib_1.__exportStar)(require_CurrencyDigits(), exports);
      (0, tslib_1.__exportStar)(require_FormatNumericToParts(), exports);
      (0, tslib_1.__exportStar)(require_FormatNumericToString(), exports);
      (0, tslib_1.__exportStar)(require_InitializeNumberFormat(), exports);
      (0, tslib_1.__exportStar)(require_PartitionNumberPattern(), exports);
      (0, tslib_1.__exportStar)(require_SetNumberFormatDigitOptions(), exports);
      (0, tslib_1.__exportStar)(require_SetNumberFormatUnitOptions(), exports);
      (0, tslib_1.__exportStar)(require_ToRawFixed(), exports);
      (0, tslib_1.__exportStar)(require_ToRawPrecision(), exports);
      var format_to_parts_1 = require_format_to_parts();
      Object.defineProperty(exports, "_formatToParts", { enumerable: true, get: function() {
        return (0, tslib_1.__importDefault)(format_to_parts_1).default;
      } });
      (0, tslib_1.__exportStar)(require_PartitionPattern(), exports);
      (0, tslib_1.__exportStar)(require_SupportedLocales(), exports);
      var utils_1 = require_utils();
      Object.defineProperty(exports, "getInternalSlot", { enumerable: true, get: function() {
        return utils_1.getInternalSlot;
      } });
      Object.defineProperty(exports, "getMultiInternalSlots", { enumerable: true, get: function() {
        return utils_1.getMultiInternalSlots;
      } });
      Object.defineProperty(exports, "isLiteralPart", { enumerable: true, get: function() {
        return utils_1.isLiteralPart;
      } });
      Object.defineProperty(exports, "setInternalSlot", { enumerable: true, get: function() {
        return utils_1.setInternalSlot;
      } });
      Object.defineProperty(exports, "setMultiInternalSlots", { enumerable: true, get: function() {
        return utils_1.setMultiInternalSlots;
      } });
      Object.defineProperty(exports, "getMagnitude", { enumerable: true, get: function() {
        return utils_1.getMagnitude;
      } });
      Object.defineProperty(exports, "defineProperty", { enumerable: true, get: function() {
        return utils_1.defineProperty;
      } });
      var data_1 = require_data();
      Object.defineProperty(exports, "isMissingLocaleDataError", { enumerable: true, get: function() {
        return data_1.isMissingLocaleDataError;
      } });
      (0, tslib_1.__exportStar)(require_relative_time(), exports);
      (0, tslib_1.__exportStar)(require_date_time(), exports);
      (0, tslib_1.__exportStar)(require_list(), exports);
      (0, tslib_1.__exportStar)(require_plural_rules(), exports);
      (0, tslib_1.__exportStar)(require_number(), exports);
      (0, tslib_1.__exportStar)(require_displaynames(), exports);
      var utils_2 = require_utils();
      Object.defineProperty(exports, "invariant", { enumerable: true, get: function() {
        return utils_2.invariant;
      } });
      (0, tslib_1.__exportStar)(require__(), exports);
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/types.js
  var require_types = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/types.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/error.js
  var require_error = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/error.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ErrorKind = void 0;
      var ErrorKind;
      (function(ErrorKind2) {
        ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
        ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
        ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
        ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
        ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
        ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
        ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
        ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
        ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
        ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
        ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
        ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
        ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
        ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
        ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
        ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
        ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
        ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
        ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
        ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
        ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
      })(ErrorKind = exports.ErrorKind || (exports.ErrorKind = {}));
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/types.js
  var require_types2 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/types.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createNumberElement = exports.createLiteralElement = exports.isDateTimeSkeleton = exports.isNumberSkeleton = exports.isTagElement = exports.isPoundElement = exports.isPluralElement = exports.isSelectElement = exports.isTimeElement = exports.isDateElement = exports.isNumberElement = exports.isArgumentElement = exports.isLiteralElement = exports.SKELETON_TYPE = exports.TYPE = void 0;
      var TYPE;
      (function(TYPE2) {
        TYPE2[TYPE2["literal"] = 0] = "literal";
        TYPE2[TYPE2["argument"] = 1] = "argument";
        TYPE2[TYPE2["number"] = 2] = "number";
        TYPE2[TYPE2["date"] = 3] = "date";
        TYPE2[TYPE2["time"] = 4] = "time";
        TYPE2[TYPE2["select"] = 5] = "select";
        TYPE2[TYPE2["plural"] = 6] = "plural";
        TYPE2[TYPE2["pound"] = 7] = "pound";
        TYPE2[TYPE2["tag"] = 8] = "tag";
      })(TYPE = exports.TYPE || (exports.TYPE = {}));
      var SKELETON_TYPE;
      (function(SKELETON_TYPE2) {
        SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
        SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
      })(SKELETON_TYPE = exports.SKELETON_TYPE || (exports.SKELETON_TYPE = {}));
      function isLiteralElement(el) {
        return el.type === TYPE.literal;
      }
      exports.isLiteralElement = isLiteralElement;
      function isArgumentElement(el) {
        return el.type === TYPE.argument;
      }
      exports.isArgumentElement = isArgumentElement;
      function isNumberElement(el) {
        return el.type === TYPE.number;
      }
      exports.isNumberElement = isNumberElement;
      function isDateElement(el) {
        return el.type === TYPE.date;
      }
      exports.isDateElement = isDateElement;
      function isTimeElement(el) {
        return el.type === TYPE.time;
      }
      exports.isTimeElement = isTimeElement;
      function isSelectElement(el) {
        return el.type === TYPE.select;
      }
      exports.isSelectElement = isSelectElement;
      function isPluralElement(el) {
        return el.type === TYPE.plural;
      }
      exports.isPluralElement = isPluralElement;
      function isPoundElement(el) {
        return el.type === TYPE.pound;
      }
      exports.isPoundElement = isPoundElement;
      function isTagElement(el) {
        return el.type === TYPE.tag;
      }
      exports.isTagElement = isTagElement;
      function isNumberSkeleton(el) {
        return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.number);
      }
      exports.isNumberSkeleton = isNumberSkeleton;
      function isDateTimeSkeleton(el) {
        return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.dateTime);
      }
      exports.isDateTimeSkeleton = isDateTimeSkeleton;
      function createLiteralElement(value) {
        return {
          type: TYPE.literal,
          value: value
        };
      }
      exports.createLiteralElement = createLiteralElement;
      function createNumberElement(value, style) {
        return {
          type: TYPE.number,
          value: value,
          style: style
        };
      }
      exports.createNumberElement = createNumberElement;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/regex.generated.js
  var require_regex_generated2 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/regex.generated.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WHITE_SPACE_REGEX = exports.SPACE_SEPARATOR_REGEX = void 0;
      exports.SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
      exports.WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-skeleton-parser/date-time.js
  var require_date_time2 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-skeleton-parser/date-time.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseDateTimeSkeleton = void 0;
      var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
      function parseDateTimeSkeleton(skeleton) {
        var result = {};
        skeleton.replace(DATE_TIME_REGEX, function(match) {
          var len = match.length;
          switch (match[0]) {
            case "G":
              result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
              break;
            case "y":
              result.year = len === 2 ? "2-digit" : "numeric";
              break;
            case "Y":
            case "u":
            case "U":
            case "r":
              throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
            case "q":
            case "Q":
              throw new RangeError("`q/Q` (quarter) patterns are not supported");
            case "M":
            case "L":
              result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
              break;
            case "w":
            case "W":
              throw new RangeError("`w/W` (week) patterns are not supported");
            case "d":
              result.day = ["numeric", "2-digit"][len - 1];
              break;
            case "D":
            case "F":
            case "g":
              throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
            case "E":
              result.weekday = len === 4 ? "short" : len === 5 ? "narrow" : "short";
              break;
            case "e":
              if (len < 4) {
                throw new RangeError("`e..eee` (weekday) patterns are not supported");
              }
              result.weekday = ["short", "long", "narrow", "short"][len - 4];
              break;
            case "c":
              if (len < 4) {
                throw new RangeError("`c..ccc` (weekday) patterns are not supported");
              }
              result.weekday = ["short", "long", "narrow", "short"][len - 4];
              break;
            case "a":
              result.hour12 = true;
              break;
            case "b":
            case "B":
              throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
            case "h":
              result.hourCycle = "h12";
              result.hour = ["numeric", "2-digit"][len - 1];
              break;
            case "H":
              result.hourCycle = "h23";
              result.hour = ["numeric", "2-digit"][len - 1];
              break;
            case "K":
              result.hourCycle = "h11";
              result.hour = ["numeric", "2-digit"][len - 1];
              break;
            case "k":
              result.hourCycle = "h24";
              result.hour = ["numeric", "2-digit"][len - 1];
              break;
            case "j":
            case "J":
            case "C":
              throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
            case "m":
              result.minute = ["numeric", "2-digit"][len - 1];
              break;
            case "s":
              result.second = ["numeric", "2-digit"][len - 1];
              break;
            case "S":
            case "A":
              throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
            case "z":
              result.timeZoneName = len < 4 ? "short" : "long";
              break;
            case "Z":
            case "O":
            case "v":
            case "V":
            case "X":
            case "x":
              throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
          }
          return "";
        });
        return result;
      }
      exports.parseDateTimeSkeleton = parseDateTimeSkeleton;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-skeleton-parser/regex.generated.js
  var require_regex_generated3 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-skeleton-parser/regex.generated.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WHITE_SPACE_REGEX = void 0;
      exports.WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-skeleton-parser/number.js
  var require_number2 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-skeleton-parser/number.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseNumberSkeleton = exports.parseNumberSkeletonFromString = void 0;
      var tslib_1 = require_tslib();
      var regex_generated_1 = require_regex_generated3();
      function parseNumberSkeletonFromString(skeleton) {
        if (skeleton.length === 0) {
          throw new Error("Number skeleton cannot be empty");
        }
        var stringTokens = skeleton.split(regex_generated_1.WHITE_SPACE_REGEX).filter(function(x) {
          return x.length > 0;
        });
        var tokens = [];
        for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
          var stringToken = stringTokens_1[_i];
          var stemAndOptions = stringToken.split("/");
          if (stemAndOptions.length === 0) {
            throw new Error("Invalid number skeleton");
          }
          var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
          for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
            var option = options_1[_a];
            if (option.length === 0) {
              throw new Error("Invalid number skeleton");
            }
          }
          tokens.push({ stem: stem, options: options });
        }
        return tokens;
      }
      exports.parseNumberSkeletonFromString = parseNumberSkeletonFromString;
      function icuUnitToEcma(unit) {
        return unit.replace(/^(.*?)-/, "");
      }
      var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
      var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
      var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
      var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
      function parseSignificantPrecision(str) {
        var result = {};
        if (str[str.length - 1] === "r") {
          result.roundingPriority = "morePrecision";
        } else if (str[str.length - 1] === "s") {
          result.roundingPriority = "lessPrecision";
        }
        str.replace(SIGNIFICANT_PRECISION_REGEX, function(_, g1, g2) {
          if (typeof g2 !== "string") {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length;
          } else if (g2 === "+") {
            result.minimumSignificantDigits = g1.length;
          } else if (g1[0] === "#") {
            result.maximumSignificantDigits = g1.length;
          } else {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length + (typeof g2 === "string" ? g2.length : 0);
          }
          return "";
        });
        return result;
      }
      function parseSign(str) {
        switch (str) {
          case "sign-auto":
            return {
              signDisplay: "auto"
            };
          case "sign-accounting":
          case "()":
            return {
              currencySign: "accounting"
            };
          case "sign-always":
          case "+!":
            return {
              signDisplay: "always"
            };
          case "sign-accounting-always":
          case "()!":
            return {
              signDisplay: "always",
              currencySign: "accounting"
            };
          case "sign-except-zero":
          case "+?":
            return {
              signDisplay: "exceptZero"
            };
          case "sign-accounting-except-zero":
          case "()?":
            return {
              signDisplay: "exceptZero",
              currencySign: "accounting"
            };
          case "sign-never":
          case "+_":
            return {
              signDisplay: "never"
            };
        }
      }
      function parseConciseScientificAndEngineeringStem(stem) {
        var result;
        if (stem[0] === "E" && stem[1] === "E") {
          result = {
            notation: "engineering"
          };
          stem = stem.slice(2);
        } else if (stem[0] === "E") {
          result = {
            notation: "scientific"
          };
          stem = stem.slice(1);
        }
        if (result) {
          var signDisplay = stem.slice(0, 2);
          if (signDisplay === "+!") {
            result.signDisplay = "always";
            stem = stem.slice(2);
          } else if (signDisplay === "+?") {
            result.signDisplay = "exceptZero";
            stem = stem.slice(2);
          }
          if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
            throw new Error("Malformed concise eng/scientific notation");
          }
          result.minimumIntegerDigits = stem.length;
        }
        return result;
      }
      function parseNotationOptions(opt) {
        var result = {};
        var signOpts = parseSign(opt);
        if (signOpts) {
          return signOpts;
        }
        return result;
      }
      function parseNumberSkeleton(tokens) {
        var result = {};
        for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
          var token = tokens_1[_i];
          switch (token.stem) {
            case "percent":
            case "%":
              result.style = "percent";
              continue;
            case "%x100":
              result.style = "percent";
              result.scale = 100;
              continue;
            case "currency":
              result.style = "currency";
              result.currency = token.options[0];
              continue;
            case "group-off":
            case ",_":
              result.useGrouping = false;
              continue;
            case "precision-integer":
            case ".":
              result.maximumFractionDigits = 0;
              continue;
            case "measure-unit":
            case "unit":
              result.style = "unit";
              result.unit = icuUnitToEcma(token.options[0]);
              continue;
            case "compact-short":
            case "K":
              result.notation = "compact";
              result.compactDisplay = "short";
              continue;
            case "compact-long":
            case "KK":
              result.notation = "compact";
              result.compactDisplay = "long";
              continue;
            case "scientific":
              result = (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), { notation: "scientific" }), token.options.reduce(function(all, opt2) {
                return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, all), parseNotationOptions(opt2));
              }, {}));
              continue;
            case "engineering":
              result = (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), { notation: "engineering" }), token.options.reduce(function(all, opt2) {
                return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, all), parseNotationOptions(opt2));
              }, {}));
              continue;
            case "notation-simple":
              result.notation = "standard";
              continue;
            case "unit-width-narrow":
              result.currencyDisplay = "narrowSymbol";
              result.unitDisplay = "narrow";
              continue;
            case "unit-width-short":
              result.currencyDisplay = "code";
              result.unitDisplay = "short";
              continue;
            case "unit-width-full-name":
              result.currencyDisplay = "name";
              result.unitDisplay = "long";
              continue;
            case "unit-width-iso-code":
              result.currencyDisplay = "symbol";
              continue;
            case "scale":
              result.scale = parseFloat(token.options[0]);
              continue;
            case "integer-width":
              if (token.options.length > 1) {
                throw new RangeError("integer-width stems only accept a single optional option");
              }
              token.options[0].replace(INTEGER_WIDTH_REGEX, function(_, g1, g2, g3, g4, g5) {
                if (g1) {
                  result.minimumIntegerDigits = g2.length;
                } else if (g3 && g4) {
                  throw new Error("We currently do not support maximum integer digits");
                } else if (g5) {
                  throw new Error("We currently do not support exact integer digits");
                }
                return "";
              });
              continue;
          }
          if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
            result.minimumIntegerDigits = token.stem.length;
            continue;
          }
          if (FRACTION_PRECISION_REGEX.test(token.stem)) {
            if (token.options.length > 1) {
              throw new RangeError("Fraction-precision stems only accept a single optional option");
            }
            token.stem.replace(FRACTION_PRECISION_REGEX, function(_, g1, g2, g3, g4, g5) {
              if (g2 === "*") {
                result.minimumFractionDigits = g1.length;
              } else if (g3 && g3[0] === "#") {
                result.maximumFractionDigits = g3.length;
              } else if (g4 && g5) {
                result.minimumFractionDigits = g4.length;
                result.maximumFractionDigits = g4.length + g5.length;
              } else {
                result.minimumFractionDigits = g1.length;
                result.maximumFractionDigits = g1.length;
              }
              return "";
            });
            var opt = token.options[0];
            if (opt === "w") {
              result = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), { trailingZeroDisplay: "stripIfInteger" });
            } else if (opt) {
              result = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), parseSignificantPrecision(opt));
            }
            continue;
          }
          if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
            result = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), parseSignificantPrecision(token.stem));
            continue;
          }
          var signOpts = parseSign(token.stem);
          if (signOpts) {
            result = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), signOpts);
          }
          var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
          if (conciseScientificAndEngineeringOpts) {
            result = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), conciseScientificAndEngineeringOpts);
          }
        }
        return result;
      }
      exports.parseNumberSkeleton = parseNumberSkeleton;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-skeleton-parser/index.js
  var require_icu_skeleton_parser = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-skeleton-parser/index.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      (0, tslib_1.__exportStar)(require_date_time2(), exports);
      (0, tslib_1.__exportStar)(require_number2(), exports);
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/time-data.generated.js
  var require_time_data_generated = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/time-data.generated.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.timeData = void 0;
      exports.timeData = {
        "AX": [
          "H"
        ],
        "BQ": [
          "H"
        ],
        "CP": [
          "H"
        ],
        "CZ": [
          "H"
        ],
        "DK": [
          "H"
        ],
        "FI": [
          "H"
        ],
        "ID": [
          "H"
        ],
        "IS": [
          "H"
        ],
        "ML": [
          "H"
        ],
        "NE": [
          "H"
        ],
        "RU": [
          "H"
        ],
        "SE": [
          "H"
        ],
        "SJ": [
          "H"
        ],
        "SK": [
          "H"
        ],
        "AS": [
          "h",
          "H"
        ],
        "BT": [
          "h",
          "H"
        ],
        "DJ": [
          "h",
          "H"
        ],
        "ER": [
          "h",
          "H"
        ],
        "GH": [
          "h",
          "H"
        ],
        "IN": [
          "h",
          "H"
        ],
        "LS": [
          "h",
          "H"
        ],
        "PG": [
          "h",
          "H"
        ],
        "PW": [
          "h",
          "H"
        ],
        "SO": [
          "h",
          "H"
        ],
        "TO": [
          "h",
          "H"
        ],
        "VU": [
          "h",
          "H"
        ],
        "WS": [
          "h",
          "H"
        ],
        "001": [
          "H",
          "h"
        ],
        "AL": [
          "h",
          "H",
          "hB"
        ],
        "TD": [
          "h",
          "H",
          "hB"
        ],
        "ca-ES": [
          "H",
          "h",
          "hB"
        ],
        "CF": [
          "H",
          "h",
          "hB"
        ],
        "CM": [
          "H",
          "h",
          "hB"
        ],
        "fr-CA": [
          "H",
          "h",
          "hB"
        ],
        "gl-ES": [
          "H",
          "h",
          "hB"
        ],
        "it-CH": [
          "H",
          "h",
          "hB"
        ],
        "it-IT": [
          "H",
          "h",
          "hB"
        ],
        "LU": [
          "H",
          "h",
          "hB"
        ],
        "NP": [
          "H",
          "h",
          "hB"
        ],
        "PF": [
          "H",
          "h",
          "hB"
        ],
        "SC": [
          "H",
          "h",
          "hB"
        ],
        "SM": [
          "H",
          "h",
          "hB"
        ],
        "SN": [
          "H",
          "h",
          "hB"
        ],
        "TF": [
          "H",
          "h",
          "hB"
        ],
        "VA": [
          "H",
          "h",
          "hB"
        ],
        "CY": [
          "h",
          "H",
          "hb",
          "hB"
        ],
        "GR": [
          "h",
          "H",
          "hb",
          "hB"
        ],
        "CO": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "DO": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "KP": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "KR": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "NA": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "PA": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "PR": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "VE": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "AC": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "AI": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "BW": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "BZ": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "CC": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "CK": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "CX": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "DG": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "FK": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "GB": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "GG": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "GI": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "IE": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "IM": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "IO": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "JE": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "LT": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "MK": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "MN": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "MS": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NF": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NG": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NR": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NU": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "PN": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "SH": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "SX": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "TA": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "ZA": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "af-ZA": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "AR": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "CL": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "CR": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "CU": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "EA": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-BO": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-BR": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-EC": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-ES": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-GQ": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-PE": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "GT": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "HN": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "IC": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "KG": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "KM": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "LK": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "MA": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "MX": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "NI": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "PY": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "SV": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "UY": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "JP": [
          "H",
          "h",
          "K"
        ],
        "AD": [
          "H",
          "hB"
        ],
        "AM": [
          "H",
          "hB"
        ],
        "AO": [
          "H",
          "hB"
        ],
        "AT": [
          "H",
          "hB"
        ],
        "AW": [
          "H",
          "hB"
        ],
        "BE": [
          "H",
          "hB"
        ],
        "BF": [
          "H",
          "hB"
        ],
        "BJ": [
          "H",
          "hB"
        ],
        "BL": [
          "H",
          "hB"
        ],
        "BR": [
          "H",
          "hB"
        ],
        "CG": [
          "H",
          "hB"
        ],
        "CI": [
          "H",
          "hB"
        ],
        "CV": [
          "H",
          "hB"
        ],
        "DE": [
          "H",
          "hB"
        ],
        "EE": [
          "H",
          "hB"
        ],
        "FR": [
          "H",
          "hB"
        ],
        "GA": [
          "H",
          "hB"
        ],
        "GF": [
          "H",
          "hB"
        ],
        "GN": [
          "H",
          "hB"
        ],
        "GP": [
          "H",
          "hB"
        ],
        "GW": [
          "H",
          "hB"
        ],
        "HR": [
          "H",
          "hB"
        ],
        "IL": [
          "H",
          "hB"
        ],
        "IT": [
          "H",
          "hB"
        ],
        "KZ": [
          "H",
          "hB"
        ],
        "MC": [
          "H",
          "hB"
        ],
        "MD": [
          "H",
          "hB"
        ],
        "MF": [
          "H",
          "hB"
        ],
        "MQ": [
          "H",
          "hB"
        ],
        "MZ": [
          "H",
          "hB"
        ],
        "NC": [
          "H",
          "hB"
        ],
        "NL": [
          "H",
          "hB"
        ],
        "PM": [
          "H",
          "hB"
        ],
        "PT": [
          "H",
          "hB"
        ],
        "RE": [
          "H",
          "hB"
        ],
        "RO": [
          "H",
          "hB"
        ],
        "SI": [
          "H",
          "hB"
        ],
        "SR": [
          "H",
          "hB"
        ],
        "ST": [
          "H",
          "hB"
        ],
        "TG": [
          "H",
          "hB"
        ],
        "TR": [
          "H",
          "hB"
        ],
        "WF": [
          "H",
          "hB"
        ],
        "YT": [
          "H",
          "hB"
        ],
        "BD": [
          "h",
          "hB",
          "H"
        ],
        "PK": [
          "h",
          "hB",
          "H"
        ],
        "AZ": [
          "H",
          "hB",
          "h"
        ],
        "BA": [
          "H",
          "hB",
          "h"
        ],
        "BG": [
          "H",
          "hB",
          "h"
        ],
        "CH": [
          "H",
          "hB",
          "h"
        ],
        "GE": [
          "H",
          "hB",
          "h"
        ],
        "LI": [
          "H",
          "hB",
          "h"
        ],
        "ME": [
          "H",
          "hB",
          "h"
        ],
        "RS": [
          "H",
          "hB",
          "h"
        ],
        "UA": [
          "H",
          "hB",
          "h"
        ],
        "UZ": [
          "H",
          "hB",
          "h"
        ],
        "XK": [
          "H",
          "hB",
          "h"
        ],
        "AG": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "AU": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BB": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BS": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "CA": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "DM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "en-001": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "FJ": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "FM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GD": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GU": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GY": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "JM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "KI": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "KN": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "KY": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "LC": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "LR": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "MH": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "MP": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "MW": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "NZ": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SB": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SG": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SL": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SS": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SZ": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "TC": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "TT": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "UM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "US": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "VC": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "VG": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "VI": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "ZM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BO": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "EC": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "ES": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "GQ": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "PE": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "AE": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "ar-001": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "BH": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "DZ": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "EG": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "EH": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "HK": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "IQ": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "JO": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "KW": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "LB": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "LY": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "MO": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "MR": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "OM": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "PH": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "PS": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "QA": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "SA": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "SD": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "SY": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "TN": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "YE": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "AF": [
          "H",
          "hb",
          "hB",
          "h"
        ],
        "LA": [
          "H",
          "hb",
          "hB",
          "h"
        ],
        "CN": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "LV": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "TL": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "zu-ZA": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "CD": [
          "hB",
          "H"
        ],
        "IR": [
          "hB",
          "H"
        ],
        "hi-IN": [
          "hB",
          "h",
          "H"
        ],
        "kn-IN": [
          "hB",
          "h",
          "H"
        ],
        "ml-IN": [
          "hB",
          "h",
          "H"
        ],
        "te-IN": [
          "hB",
          "h",
          "H"
        ],
        "KH": [
          "hB",
          "h",
          "H",
          "hb"
        ],
        "ta-IN": [
          "hB",
          "h",
          "hb",
          "H"
        ],
        "BN": [
          "hb",
          "hB",
          "h",
          "H"
        ],
        "MY": [
          "hb",
          "hB",
          "h",
          "H"
        ],
        "ET": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "gu-IN": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "mr-IN": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "pa-IN": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "TW": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "KE": [
          "hB",
          "hb",
          "H",
          "h"
        ],
        "MM": [
          "hB",
          "hb",
          "H",
          "h"
        ],
        "TZ": [
          "hB",
          "hb",
          "H",
          "h"
        ],
        "UG": [
          "hB",
          "hb",
          "H",
          "h"
        ]
      };
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/date-time-pattern-generator.js
  var require_date_time_pattern_generator = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/date-time-pattern-generator.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getBestPattern = void 0;
      var time_data_generated_1 = require_time_data_generated();
      function getBestPattern(skeleton, locale) {
        var skeletonCopy = "";
        for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
          var patternChar = skeleton.charAt(patternPos);
          if (patternChar === "j") {
            var extraLength = 0;
            while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {
              extraLength++;
              patternPos++;
            }
            var hourLen = 1 + (extraLength & 1);
            var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
            var dayPeriodChar = "a";
            var hourChar = getDefaultHourSymbolFromLocale(locale);
            if (hourChar == "H" || hourChar == "k") {
              dayPeriodLen = 0;
            }
            while (dayPeriodLen-- > 0) {
              skeletonCopy += dayPeriodChar;
            }
            while (hourLen-- > 0) {
              skeletonCopy = hourChar + skeletonCopy;
            }
          } else if (patternChar === "J") {
            skeletonCopy += "H";
          } else {
            skeletonCopy += patternChar;
          }
        }
        return skeletonCopy;
      }
      exports.getBestPattern = getBestPattern;
      function getDefaultHourSymbolFromLocale(locale) {
        var hourCycle = locale.hourCycle;
        if (hourCycle === void 0 && locale.hourCycles && locale.hourCycles.length) {
          hourCycle = locale.hourCycles[0];
        }
        if (hourCycle) {
          switch (hourCycle) {
            case "h24":
              return "k";
            case "h23":
              return "H";
            case "h12":
              return "h";
            case "h11":
              return "K";
            default:
              throw new Error("Invalid hourCycle");
          }
        }
        var languageTag = locale.language;
        var regionTag;
        if (languageTag !== "root") {
          regionTag = locale.maximize().region;
        }
        var hourCycles = time_data_generated_1.timeData[regionTag || ""] || time_data_generated_1.timeData[languageTag || ""] || time_data_generated_1.timeData["".concat(languageTag, "-001")] || time_data_generated_1.timeData["001"];
        return hourCycles[0];
      }
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/parser.js
  var require_parser = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/parser.js": function(exports) {
      "use strict";
      var _a;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Parser = void 0;
      var tslib_1 = require_tslib();
      var error_1 = require_error();
      var types_1 = require_types2();
      var regex_generated_1 = require_regex_generated2();
      var icu_skeleton_parser_1 = require_icu_skeleton_parser();
      var date_time_pattern_generator_1 = require_date_time_pattern_generator();
      var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(regex_generated_1.SPACE_SEPARATOR_REGEX.source, "*"));
      var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(regex_generated_1.SPACE_SEPARATOR_REGEX.source, "*$"));
      function createLocation(start, end) {
        return { start: start, end: end };
      }
      var hasNativeStartsWith = !!String.prototype.startsWith;
      var hasNativeFromCodePoint = !!String.fromCodePoint;
      var hasNativeFromEntries = !!Object.fromEntries;
      var hasNativeCodePointAt = !!String.prototype.codePointAt;
      var hasTrimStart = !!String.prototype.trimStart;
      var hasTrimEnd = !!String.prototype.trimEnd;
      var hasNativeIsSafeInteger = !!Number.isSafeInteger;
      var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n) {
        return typeof n === "number" && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 9007199254740991;
      };
      var REGEX_SUPPORTS_U_AND_Y = true;
      try {
        re = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
        REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec("a")) === null || _a === void 0 ? void 0 : _a[0]) === "a";
      } catch (_) {
        REGEX_SUPPORTS_U_AND_Y = false;
      }
      var re;
      var startsWith = hasNativeStartsWith ? function startsWith2(s, search, position) {
        return s.startsWith(search, position);
      } : function startsWith2(s, search, position) {
        return s.slice(position, position + search.length) === search;
      };
      var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint2() {
        var codePoints = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          codePoints[_i] = arguments[_i];
        }
        var elements = "";
        var length = codePoints.length;
        var i = 0;
        var code;
        while (length > i) {
          code = codePoints[i++];
          if (code > 1114111)
            throw RangeError(code + " is not a valid code point");
          elements += code < 65536 ? String.fromCharCode(code) : String.fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320);
        }
        return elements;
      };
      var fromEntries = hasNativeFromEntries ? Object.fromEntries : function fromEntries2(entries) {
        var obj = {};
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
          var _a2 = entries_1[_i], k = _a2[0], v = _a2[1];
          obj[k] = v;
        }
        return obj;
      };
      var codePointAt = hasNativeCodePointAt ? function codePointAt2(s, index) {
        return s.codePointAt(index);
      } : function codePointAt2(s, index) {
        var size = s.length;
        if (index < 0 || index >= size) {
          return void 0;
        }
        var first = s.charCodeAt(index);
        var second;
        return first < 55296 || first > 56319 || index + 1 === size || (second = s.charCodeAt(index + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
      };
      var trimStart = hasTrimStart ? function trimStart2(s) {
        return s.trimStart();
      } : function trimStart2(s) {
        return s.replace(SPACE_SEPARATOR_START_REGEX, "");
      };
      var trimEnd = hasTrimEnd ? function trimEnd2(s) {
        return s.trimEnd();
      } : function trimEnd2(s) {
        return s.replace(SPACE_SEPARATOR_END_REGEX, "");
      };
      function RE(s, flag) {
        return new RegExp(s, flag);
      }
      var matchIdentifierAtIndex;
      if (REGEX_SUPPORTS_U_AND_Y) {
        IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
        matchIdentifierAtIndex = function matchIdentifierAtIndex2(s, index) {
          var _a2;
          IDENTIFIER_PREFIX_RE_1.lastIndex = index;
          var match = IDENTIFIER_PREFIX_RE_1.exec(s);
          return (_a2 = match[1]) !== null && _a2 !== void 0 ? _a2 : "";
        };
      } else {
        matchIdentifierAtIndex = function matchIdentifierAtIndex2(s, index) {
          var match = [];
          while (true) {
            var c = codePointAt(s, index);
            if (c === void 0 || _isWhiteSpace(c) || _isPatternSyntax(c)) {
              break;
            }
            match.push(c);
            index += c >= 65536 ? 2 : 1;
          }
          return fromCodePoint.apply(void 0, match);
        };
      }
      var IDENTIFIER_PREFIX_RE_1;
      var Parser = function() {
        function Parser2(message, options) {
          if (options === void 0) {
            options = {};
          }
          this.message = message;
          this.position = { offset: 0, line: 1, column: 1 };
          this.ignoreTag = !!options.ignoreTag;
          this.locale = options.locale;
          this.requiresOtherClause = !!options.requiresOtherClause;
          this.shouldParseSkeletons = !!options.shouldParseSkeletons;
        }
        Parser2.prototype.parse = function() {
          if (this.offset() !== 0) {
            throw Error("parser can only be used once");
          }
          return this.parseMessage(0, "", false);
        };
        Parser2.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
          var elements = [];
          while (!this.isEOF()) {
            var char = this.char();
            if (char === 123) {
              var result = this.parseArgument(nestingLevel, expectingCloseTag);
              if (result.err) {
                return result;
              }
              elements.push(result.val);
            } else if (char === 125 && nestingLevel > 0) {
              break;
            } else if (char === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
              var position = this.clonePosition();
              this.bump();
              elements.push({
                type: types_1.TYPE.pound,
                location: createLocation(position, this.clonePosition())
              });
            } else if (char === 60 && !this.ignoreTag && this.peek() === 47) {
              if (expectingCloseTag) {
                break;
              } else {
                return this.error(error_1.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
              }
            } else if (char === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
              var result = this.parseTag(nestingLevel, parentArgType);
              if (result.err) {
                return result;
              }
              elements.push(result.val);
            } else {
              var result = this.parseLiteral(nestingLevel, parentArgType);
              if (result.err) {
                return result;
              }
              elements.push(result.val);
            }
          }
          return { val: elements, err: null };
        };
        Parser2.prototype.parseTag = function(nestingLevel, parentArgType) {
          var startPosition = this.clonePosition();
          this.bump();
          var tagName = this.parseTagName();
          this.bumpSpace();
          if (this.bumpIf("/>")) {
            return {
              val: {
                type: types_1.TYPE.literal,
                value: "<".concat(tagName, "/>"),
                location: createLocation(startPosition, this.clonePosition())
              },
              err: null
            };
          } else if (this.bumpIf(">")) {
            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
            if (childrenResult.err) {
              return childrenResult;
            }
            var children = childrenResult.val;
            var endTagStartPosition = this.clonePosition();
            if (this.bumpIf("</")) {
              if (this.isEOF() || !_isAlpha(this.char())) {
                return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
              }
              var closingTagNameStartPosition = this.clonePosition();
              var closingTagName = this.parseTagName();
              if (tagName !== closingTagName) {
                return this.error(error_1.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
              }
              this.bumpSpace();
              if (!this.bumpIf(">")) {
                return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
              }
              return {
                val: {
                  type: types_1.TYPE.tag,
                  value: tagName,
                  children: children,
                  location: createLocation(startPosition, this.clonePosition())
                },
                err: null
              };
            } else {
              return this.error(error_1.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
            }
          } else {
            return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
          }
        };
        Parser2.prototype.parseTagName = function() {
          var startOffset = this.offset();
          this.bump();
          while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
            this.bump();
          }
          return this.message.slice(startOffset, this.offset());
        };
        Parser2.prototype.parseLiteral = function(nestingLevel, parentArgType) {
          var start = this.clonePosition();
          var value = "";
          while (true) {
            var parseQuoteResult = this.tryParseQuote(parentArgType);
            if (parseQuoteResult) {
              value += parseQuoteResult;
              continue;
            }
            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
            if (parseUnquotedResult) {
              value += parseUnquotedResult;
              continue;
            }
            var parseLeftAngleResult = this.tryParseLeftAngleBracket();
            if (parseLeftAngleResult) {
              value += parseLeftAngleResult;
              continue;
            }
            break;
          }
          var location = createLocation(start, this.clonePosition());
          return {
            val: { type: types_1.TYPE.literal, value: value, location: location },
            err: null
          };
        };
        Parser2.prototype.tryParseLeftAngleBracket = function() {
          if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || !_isAlphaOrSlash(this.peek() || 0))) {
            this.bump();
            return "<";
          }
          return null;
        };
        Parser2.prototype.tryParseQuote = function(parentArgType) {
          if (this.isEOF() || this.char() !== 39) {
            return null;
          }
          switch (this.peek()) {
            case 39:
              this.bump();
              this.bump();
              return "'";
            case 123:
            case 60:
            case 62:
            case 125:
              break;
            case 35:
              if (parentArgType === "plural" || parentArgType === "selectordinal") {
                break;
              }
              return null;
            default:
              return null;
          }
          this.bump();
          var codePoints = [this.char()];
          this.bump();
          while (!this.isEOF()) {
            var ch = this.char();
            if (ch === 39) {
              if (this.peek() === 39) {
                codePoints.push(39);
                this.bump();
              } else {
                this.bump();
                break;
              }
            } else {
              codePoints.push(ch);
            }
            this.bump();
          }
          return fromCodePoint.apply(void 0, codePoints);
        };
        Parser2.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
          if (this.isEOF()) {
            return null;
          }
          var ch = this.char();
          if (ch === 60 || ch === 123 || ch === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch === 125 && nestingLevel > 0) {
            return null;
          } else {
            this.bump();
            return fromCodePoint(ch);
          }
        };
        Parser2.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
          var openingBracePosition = this.clonePosition();
          this.bump();
          this.bumpSpace();
          if (this.isEOF()) {
            return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
          }
          if (this.char() === 125) {
            this.bump();
            return this.error(error_1.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
          }
          var value = this.parseIdentifierIfPossible().value;
          if (!value) {
            return this.error(error_1.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
          }
          this.bumpSpace();
          if (this.isEOF()) {
            return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
          }
          switch (this.char()) {
            case 125: {
              this.bump();
              return {
                val: {
                  type: types_1.TYPE.argument,
                  value: value,
                  location: createLocation(openingBracePosition, this.clonePosition())
                },
                err: null
              };
            }
            case 44: {
              this.bump();
              this.bumpSpace();
              if (this.isEOF()) {
                return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
              }
              return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
            }
            default:
              return this.error(error_1.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
          }
        };
        Parser2.prototype.parseIdentifierIfPossible = function() {
          var startingPosition = this.clonePosition();
          var startOffset = this.offset();
          var value = matchIdentifierAtIndex(this.message, startOffset);
          var endOffset = startOffset + value.length;
          this.bumpTo(endOffset);
          var endPosition = this.clonePosition();
          var location = createLocation(startingPosition, endPosition);
          return { value: value, location: location };
        };
        Parser2.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
          var _a2;
          var typeStartPosition = this.clonePosition();
          var argType = this.parseIdentifierIfPossible().value;
          var typeEndPosition = this.clonePosition();
          switch (argType) {
            case "":
              return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
            case "number":
            case "date":
            case "time": {
              this.bumpSpace();
              var styleAndLocation = null;
              if (this.bumpIf(",")) {
                this.bumpSpace();
                var styleStartPosition = this.clonePosition();
                var result = this.parseSimpleArgStyleIfPossible();
                if (result.err) {
                  return result;
                }
                var style = trimEnd(result.val);
                if (style.length === 0) {
                  return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
                }
                var styleLocation = createLocation(styleStartPosition, this.clonePosition());
                styleAndLocation = { style: style, styleLocation: styleLocation };
              }
              var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
              if (argCloseResult.err) {
                return argCloseResult;
              }
              var location_1 = createLocation(openingBracePosition, this.clonePosition());
              if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
                var skeleton = trimStart(styleAndLocation.style.slice(2));
                if (argType === "number") {
                  var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
                  if (result.err) {
                    return result;
                  }
                  return {
                    val: { type: types_1.TYPE.number, value: value, location: location_1, style: result.val },
                    err: null
                  };
                } else {
                  if (skeleton.length === 0) {
                    return this.error(error_1.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                  }
                  var dateTimePattern = skeleton;
                  if (this.locale) {
                    dateTimePattern = (0, date_time_pattern_generator_1.getBestPattern)(skeleton, this.locale);
                  }
                  var style = {
                    type: types_1.SKELETON_TYPE.dateTime,
                    pattern: dateTimePattern,
                    location: styleAndLocation.styleLocation,
                    parsedOptions: this.shouldParseSkeletons ? (0, icu_skeleton_parser_1.parseDateTimeSkeleton)(dateTimePattern) : {}
                  };
                  var type = argType === "date" ? types_1.TYPE.date : types_1.TYPE.time;
                  return {
                    val: { type: type, value: value, location: location_1, style: style },
                    err: null
                  };
                }
              }
              return {
                val: {
                  type: argType === "number" ? types_1.TYPE.number : argType === "date" ? types_1.TYPE.date : types_1.TYPE.time,
                  value: value,
                  location: location_1,
                  style: (_a2 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a2 !== void 0 ? _a2 : null
                },
                err: null
              };
            }
            case "plural":
            case "selectordinal":
            case "select": {
              var typeEndPosition_1 = this.clonePosition();
              this.bumpSpace();
              if (!this.bumpIf(",")) {
                return this.error(error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, (0, tslib_1.__assign)({}, typeEndPosition_1)));
              }
              this.bumpSpace();
              var identifierAndLocation = this.parseIdentifierIfPossible();
              var pluralOffset = 0;
              if (argType !== "select" && identifierAndLocation.value === "offset") {
                if (!this.bumpIf(":")) {
                  return this.error(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
                }
                this.bumpSpace();
                var result = this.tryParseDecimalInteger(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, error_1.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
                if (result.err) {
                  return result;
                }
                this.bumpSpace();
                identifierAndLocation = this.parseIdentifierIfPossible();
                pluralOffset = result.val;
              }
              var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
              if (optionsResult.err) {
                return optionsResult;
              }
              var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
              if (argCloseResult.err) {
                return argCloseResult;
              }
              var location_2 = createLocation(openingBracePosition, this.clonePosition());
              if (argType === "select") {
                return {
                  val: {
                    type: types_1.TYPE.select,
                    value: value,
                    options: fromEntries(optionsResult.val),
                    location: location_2
                  },
                  err: null
                };
              } else {
                return {
                  val: {
                    type: types_1.TYPE.plural,
                    value: value,
                    options: fromEntries(optionsResult.val),
                    offset: pluralOffset,
                    pluralType: argType === "plural" ? "cardinal" : "ordinal",
                    location: location_2
                  },
                  err: null
                };
              }
            }
            default:
              return this.error(error_1.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
          }
        };
        Parser2.prototype.tryParseArgumentClose = function(openingBracePosition) {
          if (this.isEOF() || this.char() !== 125) {
            return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
          }
          this.bump();
          return { val: true, err: null };
        };
        Parser2.prototype.parseSimpleArgStyleIfPossible = function() {
          var nestedBraces = 0;
          var startPosition = this.clonePosition();
          while (!this.isEOF()) {
            var ch = this.char();
            switch (ch) {
              case 39: {
                this.bump();
                var apostrophePosition = this.clonePosition();
                if (!this.bumpUntil("'")) {
                  return this.error(error_1.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
                }
                this.bump();
                break;
              }
              case 123: {
                nestedBraces += 1;
                this.bump();
                break;
              }
              case 125: {
                if (nestedBraces > 0) {
                  nestedBraces -= 1;
                } else {
                  return {
                    val: this.message.slice(startPosition.offset, this.offset()),
                    err: null
                  };
                }
                break;
              }
              default:
                this.bump();
                break;
            }
          }
          return {
            val: this.message.slice(startPosition.offset, this.offset()),
            err: null
          };
        };
        Parser2.prototype.parseNumberSkeletonFromString = function(skeleton, location) {
          var tokens = [];
          try {
            tokens = (0, icu_skeleton_parser_1.parseNumberSkeletonFromString)(skeleton);
          } catch (e) {
            return this.error(error_1.ErrorKind.INVALID_NUMBER_SKELETON, location);
          }
          return {
            val: {
              type: types_1.SKELETON_TYPE.number,
              tokens: tokens,
              location: location,
              parsedOptions: this.shouldParseSkeletons ? (0, icu_skeleton_parser_1.parseNumberSkeleton)(tokens) : {}
            },
            err: null
          };
        };
        Parser2.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
          var _a2;
          var hasOtherClause = false;
          var options = [];
          var parsedSelectors = /* @__PURE__ */ new Set();
          var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
          while (true) {
            if (selector.length === 0) {
              var startPosition = this.clonePosition();
              if (parentArgType !== "select" && this.bumpIf("=")) {
                var result = this.tryParseDecimalInteger(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, error_1.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
                if (result.err) {
                  return result;
                }
                selectorLocation = createLocation(startPosition, this.clonePosition());
                selector = this.message.slice(startPosition.offset, this.offset());
              } else {
                break;
              }
            }
            if (parsedSelectors.has(selector)) {
              return this.error(parentArgType === "select" ? error_1.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : error_1.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
            }
            if (selector === "other") {
              hasOtherClause = true;
            }
            this.bumpSpace();
            var openingBracePosition = this.clonePosition();
            if (!this.bumpIf("{")) {
              return this.error(parentArgType === "select" ? error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
            }
            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
            if (fragmentResult.err) {
              return fragmentResult;
            }
            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
            if (argCloseResult.err) {
              return argCloseResult;
            }
            options.push([
              selector,
              {
                value: fragmentResult.val,
                location: createLocation(openingBracePosition, this.clonePosition())
              }
            ]);
            parsedSelectors.add(selector);
            this.bumpSpace();
            _a2 = this.parseIdentifierIfPossible(), selector = _a2.value, selectorLocation = _a2.location;
          }
          if (options.length === 0) {
            return this.error(parentArgType === "select" ? error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
          }
          if (this.requiresOtherClause && !hasOtherClause) {
            return this.error(error_1.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
          }
          return { val: options, err: null };
        };
        Parser2.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
          var sign = 1;
          var startingPosition = this.clonePosition();
          if (this.bumpIf("+")) {
          } else if (this.bumpIf("-")) {
            sign = -1;
          }
          var hasDigits = false;
          var decimal = 0;
          while (!this.isEOF()) {
            var ch = this.char();
            if (ch >= 48 && ch <= 57) {
              hasDigits = true;
              decimal = decimal * 10 + (ch - 48);
              this.bump();
            } else {
              break;
            }
          }
          var location = createLocation(startingPosition, this.clonePosition());
          if (!hasDigits) {
            return this.error(expectNumberError, location);
          }
          decimal *= sign;
          if (!isSafeInteger(decimal)) {
            return this.error(invalidNumberError, location);
          }
          return { val: decimal, err: null };
        };
        Parser2.prototype.offset = function() {
          return this.position.offset;
        };
        Parser2.prototype.isEOF = function() {
          return this.offset() === this.message.length;
        };
        Parser2.prototype.clonePosition = function() {
          return {
            offset: this.position.offset,
            line: this.position.line,
            column: this.position.column
          };
        };
        Parser2.prototype.char = function() {
          var offset = this.position.offset;
          if (offset >= this.message.length) {
            throw Error("out of bound");
          }
          var code = codePointAt(this.message, offset);
          if (code === void 0) {
            throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
          }
          return code;
        };
        Parser2.prototype.error = function(kind, location) {
          return {
            val: null,
            err: {
              kind: kind,
              message: this.message,
              location: location
            }
          };
        };
        Parser2.prototype.bump = function() {
          if (this.isEOF()) {
            return;
          }
          var code = this.char();
          if (code === 10) {
            this.position.line += 1;
            this.position.column = 1;
            this.position.offset += 1;
          } else {
            this.position.column += 1;
            this.position.offset += code < 65536 ? 1 : 2;
          }
        };
        Parser2.prototype.bumpIf = function(prefix) {
          if (startsWith(this.message, prefix, this.offset())) {
            for (var i = 0; i < prefix.length; i++) {
              this.bump();
            }
            return true;
          }
          return false;
        };
        Parser2.prototype.bumpUntil = function(pattern) {
          var currentOffset = this.offset();
          var index = this.message.indexOf(pattern, currentOffset);
          if (index >= 0) {
            this.bumpTo(index);
            return true;
          } else {
            this.bumpTo(this.message.length);
            return false;
          }
        };
        Parser2.prototype.bumpTo = function(targetOffset) {
          if (this.offset() > targetOffset) {
            throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
          }
          targetOffset = Math.min(targetOffset, this.message.length);
          while (true) {
            var offset = this.offset();
            if (offset === targetOffset) {
              break;
            }
            if (offset > targetOffset) {
              throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
            }
            this.bump();
            if (this.isEOF()) {
              break;
            }
          }
        };
        Parser2.prototype.bumpSpace = function() {
          while (!this.isEOF() && _isWhiteSpace(this.char())) {
            this.bump();
          }
        };
        Parser2.prototype.peek = function() {
          if (this.isEOF()) {
            return null;
          }
          var code = this.char();
          var offset = this.offset();
          var nextCode = this.message.charCodeAt(offset + (code >= 65536 ? 2 : 1));
          return nextCode !== null && nextCode !== void 0 ? nextCode : null;
        };
        return Parser2;
      }();
      exports.Parser = Parser;
      function _isAlpha(codepoint) {
        return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
      }
      function _isAlphaOrSlash(codepoint) {
        return _isAlpha(codepoint) || codepoint === 47;
      }
      function _isPotentialElementNameChar(c) {
        return c === 45 || c === 46 || c >= 48 && c <= 57 || c === 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 183 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 893 || c >= 895 && c <= 8191 || c >= 8204 && c <= 8205 || c >= 8255 && c <= 8256 || c >= 8304 && c <= 8591 || c >= 11264 && c <= 12271 || c >= 12289 && c <= 55295 || c >= 63744 && c <= 64975 || c >= 65008 && c <= 65533 || c >= 65536 && c <= 983039;
      }
      function _isWhiteSpace(c) {
        return c >= 9 && c <= 13 || c === 32 || c === 133 || c >= 8206 && c <= 8207 || c === 8232 || c === 8233;
      }
      function _isPatternSyntax(c) {
        return c >= 33 && c <= 35 || c === 36 || c >= 37 && c <= 39 || c === 40 || c === 41 || c === 42 || c === 43 || c === 44 || c === 45 || c >= 46 && c <= 47 || c >= 58 && c <= 59 || c >= 60 && c <= 62 || c >= 63 && c <= 64 || c === 91 || c === 92 || c === 93 || c === 94 || c === 96 || c === 123 || c === 124 || c === 125 || c === 126 || c === 161 || c >= 162 && c <= 165 || c === 166 || c === 167 || c === 169 || c === 171 || c === 172 || c === 174 || c === 176 || c === 177 || c === 182 || c === 187 || c === 191 || c === 215 || c === 247 || c >= 8208 && c <= 8213 || c >= 8214 && c <= 8215 || c === 8216 || c === 8217 || c === 8218 || c >= 8219 && c <= 8220 || c === 8221 || c === 8222 || c === 8223 || c >= 8224 && c <= 8231 || c >= 8240 && c <= 8248 || c === 8249 || c === 8250 || c >= 8251 && c <= 8254 || c >= 8257 && c <= 8259 || c === 8260 || c === 8261 || c === 8262 || c >= 8263 && c <= 8273 || c === 8274 || c === 8275 || c >= 8277 && c <= 8286 || c >= 8592 && c <= 8596 || c >= 8597 && c <= 8601 || c >= 8602 && c <= 8603 || c >= 8604 && c <= 8607 || c === 8608 || c >= 8609 && c <= 8610 || c === 8611 || c >= 8612 && c <= 8613 || c === 8614 || c >= 8615 && c <= 8621 || c === 8622 || c >= 8623 && c <= 8653 || c >= 8654 && c <= 8655 || c >= 8656 && c <= 8657 || c === 8658 || c === 8659 || c === 8660 || c >= 8661 && c <= 8691 || c >= 8692 && c <= 8959 || c >= 8960 && c <= 8967 || c === 8968 || c === 8969 || c === 8970 || c === 8971 || c >= 8972 && c <= 8991 || c >= 8992 && c <= 8993 || c >= 8994 && c <= 9e3 || c === 9001 || c === 9002 || c >= 9003 && c <= 9083 || c === 9084 || c >= 9085 && c <= 9114 || c >= 9115 && c <= 9139 || c >= 9140 && c <= 9179 || c >= 9180 && c <= 9185 || c >= 9186 && c <= 9254 || c >= 9255 && c <= 9279 || c >= 9280 && c <= 9290 || c >= 9291 && c <= 9311 || c >= 9472 && c <= 9654 || c === 9655 || c >= 9656 && c <= 9664 || c === 9665 || c >= 9666 && c <= 9719 || c >= 9720 && c <= 9727 || c >= 9728 && c <= 9838 || c === 9839 || c >= 9840 && c <= 10087 || c === 10088 || c === 10089 || c === 10090 || c === 10091 || c === 10092 || c === 10093 || c === 10094 || c === 10095 || c === 10096 || c === 10097 || c === 10098 || c === 10099 || c === 10100 || c === 10101 || c >= 10132 && c <= 10175 || c >= 10176 && c <= 10180 || c === 10181 || c === 10182 || c >= 10183 && c <= 10213 || c === 10214 || c === 10215 || c === 10216 || c === 10217 || c === 10218 || c === 10219 || c === 10220 || c === 10221 || c === 10222 || c === 10223 || c >= 10224 && c <= 10239 || c >= 10240 && c <= 10495 || c >= 10496 && c <= 10626 || c === 10627 || c === 10628 || c === 10629 || c === 10630 || c === 10631 || c === 10632 || c === 10633 || c === 10634 || c === 10635 || c === 10636 || c === 10637 || c === 10638 || c === 10639 || c === 10640 || c === 10641 || c === 10642 || c === 10643 || c === 10644 || c === 10645 || c === 10646 || c === 10647 || c === 10648 || c >= 10649 && c <= 10711 || c === 10712 || c === 10713 || c === 10714 || c === 10715 || c >= 10716 && c <= 10747 || c === 10748 || c === 10749 || c >= 10750 && c <= 11007 || c >= 11008 && c <= 11055 || c >= 11056 && c <= 11076 || c >= 11077 && c <= 11078 || c >= 11079 && c <= 11084 || c >= 11085 && c <= 11123 || c >= 11124 && c <= 11125 || c >= 11126 && c <= 11157 || c === 11158 || c >= 11159 && c <= 11263 || c >= 11776 && c <= 11777 || c === 11778 || c === 11779 || c === 11780 || c === 11781 || c >= 11782 && c <= 11784 || c === 11785 || c === 11786 || c === 11787 || c === 11788 || c === 11789 || c >= 11790 && c <= 11798 || c === 11799 || c >= 11800 && c <= 11801 || c === 11802 || c === 11803 || c === 11804 || c === 11805 || c >= 11806 && c <= 11807 || c === 11808 || c === 11809 || c === 11810 || c === 11811 || c === 11812 || c === 11813 || c === 11814 || c === 11815 || c === 11816 || c === 11817 || c >= 11818 && c <= 11822 || c === 11823 || c >= 11824 && c <= 11833 || c >= 11834 && c <= 11835 || c >= 11836 && c <= 11839 || c === 11840 || c === 11841 || c === 11842 || c >= 11843 && c <= 11855 || c >= 11856 && c <= 11857 || c === 11858 || c >= 11859 && c <= 11903 || c >= 12289 && c <= 12291 || c === 12296 || c === 12297 || c === 12298 || c === 12299 || c === 12300 || c === 12301 || c === 12302 || c === 12303 || c === 12304 || c === 12305 || c >= 12306 && c <= 12307 || c === 12308 || c === 12309 || c === 12310 || c === 12311 || c === 12312 || c === 12313 || c === 12314 || c === 12315 || c === 12316 || c === 12317 || c >= 12318 && c <= 12319 || c === 12320 || c === 12336 || c === 64830 || c === 64831 || c >= 65093 && c <= 65094;
      }
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/index.js
  var require_icu_messageformat_parser = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/icu-messageformat-parser/index.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parse = void 0;
      var tslib_1 = require_tslib();
      var error_1 = require_error();
      var parser_1 = require_parser();
      var types_1 = require_types2();
      function pruneLocation(els) {
        els.forEach(function(el) {
          delete el.location;
          if ((0, types_1.isSelectElement)(el) || (0, types_1.isPluralElement)(el)) {
            for (var k in el.options) {
              delete el.options[k].location;
              pruneLocation(el.options[k].value);
            }
          } else if ((0, types_1.isNumberElement)(el) && (0, types_1.isNumberSkeleton)(el.style)) {
            delete el.style.location;
          } else if (((0, types_1.isDateElement)(el) || (0, types_1.isTimeElement)(el)) && (0, types_1.isDateTimeSkeleton)(el.style)) {
            delete el.style.location;
          } else if ((0, types_1.isTagElement)(el)) {
            pruneLocation(el.children);
          }
        });
      }
      function parse(message, opts) {
        if (opts === void 0) {
          opts = {};
        }
        opts = (0, tslib_1.__assign)({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
        var result = new parser_1.Parser(message, opts).parse();
        if (result.err) {
          var error = SyntaxError(error_1.ErrorKind[result.err.kind]);
          error.location = result.err.location;
          error.originalMessage = result.err.message;
          throw error;
        }
        if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
          pruneLocation(result.val);
        }
        return result.val;
      }
      exports.parse = parse;
      (0, tslib_1.__exportStar)(require_types2(), exports);
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/fast-memoize/index.js
  var require_fast_memoize = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/fast-memoize/index.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.strategies = void 0;
      function memoize(fn, options) {
        var cache = options && options.cache ? options.cache : cacheDefault;
        var serializer = options && options.serializer ? options.serializer : serializerDefault;
        var strategy = options && options.strategy ? options.strategy : strategyDefault;
        return strategy(fn, {
          cache: cache,
          serializer: serializer
        });
      }
      exports.default = memoize;
      function isPrimitive(value) {
        return value == null || typeof value === "number" || typeof value === "boolean";
      }
      function monadic(fn, cache, serializer, arg) {
        var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
        var computedValue = cache.get(cacheKey);
        if (typeof computedValue === "undefined") {
          computedValue = fn.call(this, arg);
          cache.set(cacheKey, computedValue);
        }
        return computedValue;
      }
      function variadic(fn, cache, serializer) {
        var args = Array.prototype.slice.call(arguments, 3);
        var cacheKey = serializer(args);
        var computedValue = cache.get(cacheKey);
        if (typeof computedValue === "undefined") {
          computedValue = fn.apply(this, args);
          cache.set(cacheKey, computedValue);
        }
        return computedValue;
      }
      function assemble(fn, context, strategy, cache, serialize) {
        return strategy.bind(context, fn, cache, serialize);
      }
      function strategyDefault(fn, options) {
        var strategy = fn.length === 1 ? monadic : variadic;
        return assemble(fn, this, strategy, options.cache.create(), options.serializer);
      }
      function strategyVariadic(fn, options) {
        return assemble(fn, this, variadic, options.cache.create(), options.serializer);
      }
      function strategyMonadic(fn, options) {
        return assemble(fn, this, monadic, options.cache.create(), options.serializer);
      }
      var serializerDefault = function() {
        return JSON.stringify(arguments);
      };
      function ObjectWithoutPrototypeCache() {
        this.cache = /* @__PURE__ */ Object.create(null);
      }
      ObjectWithoutPrototypeCache.prototype.get = function(key) {
        return this.cache[key];
      };
      ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
        this.cache[key] = value;
      };
      var cacheDefault = {
        create: function create() {
          return new ObjectWithoutPrototypeCache();
        }
      };
      exports.strategies = {
        variadic: strategyVariadic,
        monadic: strategyMonadic
      };
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-messageformat/src/error.js
  var require_error2 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-messageformat/src/error.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MissingValueError = exports.InvalidValueTypeError = exports.InvalidValueError = exports.FormatError = exports.ErrorCode = void 0;
      var tslib_1 = require_tslib();
      var ErrorCode;
      (function(ErrorCode2) {
        ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
        ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
        ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
      })(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
      var FormatError = function(_super) {
        (0, tslib_1.__extends)(FormatError2, _super);
        function FormatError2(msg, code, originalMessage) {
          var _this = _super.call(this, msg) || this;
          _this.code = code;
          _this.originalMessage = originalMessage;
          return _this;
        }
        FormatError2.prototype.toString = function() {
          return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
        };
        return FormatError2;
      }(Error);
      exports.FormatError = FormatError;
      var InvalidValueError = function(_super) {
        (0, tslib_1.__extends)(InvalidValueError2, _super);
        function InvalidValueError2(variableId, value, options, originalMessage) {
          return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value, '". Options are "').concat(Object.keys(options).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
        }
        return InvalidValueError2;
      }(FormatError);
      exports.InvalidValueError = InvalidValueError;
      var InvalidValueTypeError = function(_super) {
        (0, tslib_1.__extends)(InvalidValueTypeError2, _super);
        function InvalidValueTypeError2(value, type, originalMessage) {
          return _super.call(this, 'Value for "'.concat(value, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
        }
        return InvalidValueTypeError2;
      }(FormatError);
      exports.InvalidValueTypeError = InvalidValueTypeError;
      var MissingValueError = function(_super) {
        (0, tslib_1.__extends)(MissingValueError2, _super);
        function MissingValueError2(variableId, originalMessage) {
          return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
        }
        return MissingValueError2;
      }(FormatError);
      exports.MissingValueError = MissingValueError;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-messageformat/src/formatters.js
  var require_formatters = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-messageformat/src/formatters.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formatToParts = exports.isFormatXMLElementFn = exports.PART_TYPE = void 0;
      var icu_messageformat_parser_1 = require_icu_messageformat_parser();
      var error_1 = require_error2();
      var PART_TYPE;
      (function(PART_TYPE2) {
        PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
        PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
      })(PART_TYPE = exports.PART_TYPE || (exports.PART_TYPE = {}));
      function mergeLiteral(parts) {
        if (parts.length < 2) {
          return parts;
        }
        return parts.reduce(function(all, part) {
          var lastPart = all[all.length - 1];
          if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
            all.push(part);
          } else {
            lastPart.value += part.value;
          }
          return all;
        }, []);
      }
      function isFormatXMLElementFn2(el) {
        return typeof el === "function";
      }
      exports.isFormatXMLElementFn = isFormatXMLElementFn2;
      function formatToParts(els, locales, formatters, formats, values, currentPluralValue, originalMessage) {
        if (els.length === 1 && (0, icu_messageformat_parser_1.isLiteralElement)(els[0])) {
          return [
            {
              type: PART_TYPE.literal,
              value: els[0].value
            }
          ];
        }
        var result = [];
        for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
          var el = els_1[_i];
          if ((0, icu_messageformat_parser_1.isLiteralElement)(el)) {
            result.push({
              type: PART_TYPE.literal,
              value: el.value
            });
            continue;
          }
          if ((0, icu_messageformat_parser_1.isPoundElement)(el)) {
            if (typeof currentPluralValue === "number") {
              result.push({
                type: PART_TYPE.literal,
                value: formatters.getNumberFormat(locales).format(currentPluralValue)
              });
            }
            continue;
          }
          var varName = el.value;
          if (!(values && varName in values)) {
            throw new error_1.MissingValueError(varName, originalMessage);
          }
          var value = values[varName];
          if ((0, icu_messageformat_parser_1.isArgumentElement)(el)) {
            if (!value || typeof value === "string" || typeof value === "number") {
              value = typeof value === "string" || typeof value === "number" ? String(value) : "";
            }
            result.push({
              type: typeof value === "string" ? PART_TYPE.literal : PART_TYPE.object,
              value: value
            });
            continue;
          }
          if ((0, icu_messageformat_parser_1.isDateElement)(el)) {
            var style = typeof el.style === "string" ? formats.date[el.style] : (0, icu_messageformat_parser_1.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : void 0;
            result.push({
              type: PART_TYPE.literal,
              value: formatters.getDateTimeFormat(locales, style).format(value)
            });
            continue;
          }
          if ((0, icu_messageformat_parser_1.isTimeElement)(el)) {
            var style = typeof el.style === "string" ? formats.time[el.style] : (0, icu_messageformat_parser_1.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;
            result.push({
              type: PART_TYPE.literal,
              value: formatters.getDateTimeFormat(locales, style).format(value)
            });
            continue;
          }
          if ((0, icu_messageformat_parser_1.isNumberElement)(el)) {
            var style = typeof el.style === "string" ? formats.number[el.style] : (0, icu_messageformat_parser_1.isNumberSkeleton)(el.style) ? el.style.parsedOptions : void 0;
            if (style && style.scale) {
              value = value * (style.scale || 1);
            }
            result.push({
              type: PART_TYPE.literal,
              value: formatters.getNumberFormat(locales, style).format(value)
            });
            continue;
          }
          if ((0, icu_messageformat_parser_1.isTagElement)(el)) {
            var children = el.children, value_1 = el.value;
            var formatFn = values[value_1];
            if (!isFormatXMLElementFn2(formatFn)) {
              throw new error_1.InvalidValueTypeError(value_1, "function", originalMessage);
            }
            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
            var chunks = formatFn(parts.map(function(p) {
              return p.value;
            }));
            if (!Array.isArray(chunks)) {
              chunks = [chunks];
            }
            result.push.apply(result, chunks.map(function(c) {
              return {
                type: typeof c === "string" ? PART_TYPE.literal : PART_TYPE.object,
                value: c
              };
            }));
          }
          if ((0, icu_messageformat_parser_1.isSelectElement)(el)) {
            var opt = el.options[value] || el.options.other;
            if (!opt) {
              throw new error_1.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
            continue;
          }
          if ((0, icu_messageformat_parser_1.isPluralElement)(el)) {
            var opt = el.options["=".concat(value)];
            if (!opt) {
              if (!Intl.PluralRules) {
                throw new error_1.FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', error_1.ErrorCode.MISSING_INTL_API, originalMessage);
              }
              var rule = formatters.getPluralRules(locales, { type: el.pluralType }).select(value - (el.offset || 0));
              opt = el.options[rule] || el.options.other;
            }
            if (!opt) {
              throw new error_1.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
            continue;
          }
        }
        return mergeLiteral(result);
      }
      exports.formatToParts = formatToParts;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-messageformat/src/core.js
  var require_core = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-messageformat/src/core.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IntlMessageFormat = void 0;
      var tslib_1 = require_tslib();
      var icu_messageformat_parser_1 = require_icu_messageformat_parser();
      var fast_memoize_1 = (0, tslib_1.__importStar)(require_fast_memoize());
      var formatters_1 = require_formatters();
      function mergeConfig(c1, c2) {
        if (!c2) {
          return c1;
        }
        return (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function(all, k) {
          all[k] = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, c1[k]), c2[k] || {});
          return all;
        }, {}));
      }
      function mergeConfigs(defaultConfig, configs) {
        if (!configs) {
          return defaultConfig;
        }
        return Object.keys(defaultConfig).reduce(function(all, k) {
          all[k] = mergeConfig(defaultConfig[k], configs[k]);
          return all;
        }, (0, tslib_1.__assign)({}, defaultConfig));
      }
      function createFastMemoizeCache(store) {
        return {
          create: function() {
            return {
              get: function(key) {
                return store[key];
              },
              set: function(key, value) {
                store[key] = value;
              }
            };
          }
        };
      }
      function createDefaultFormatters(cache) {
        if (cache === void 0) {
          cache = {
            number: {},
            dateTime: {},
            pluralRules: {}
          };
        }
        return {
          getNumberFormat: (0, fast_memoize_1.default)(function() {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return new ((_a = Intl.NumberFormat).bind.apply(_a, (0, tslib_1.__spreadArray)([void 0], args, false)))();
          }, {
            cache: createFastMemoizeCache(cache.number),
            strategy: fast_memoize_1.strategies.variadic
          }),
          getDateTimeFormat: (0, fast_memoize_1.default)(function() {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0, tslib_1.__spreadArray)([void 0], args, false)))();
          }, {
            cache: createFastMemoizeCache(cache.dateTime),
            strategy: fast_memoize_1.strategies.variadic
          }),
          getPluralRules: (0, fast_memoize_1.default)(function() {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return new ((_a = Intl.PluralRules).bind.apply(_a, (0, tslib_1.__spreadArray)([void 0], args, false)))();
          }, {
            cache: createFastMemoizeCache(cache.pluralRules),
            strategy: fast_memoize_1.strategies.variadic
          })
        };
      }
      var IntlMessageFormat = function() {
        function IntlMessageFormat2(message, locales, overrideFormats, opts) {
          var _this = this;
          if (locales === void 0) {
            locales = IntlMessageFormat2.defaultLocale;
          }
          this.formatterCache = {
            number: {},
            dateTime: {},
            pluralRules: {}
          };
          this.format = function(values) {
            var parts = _this.formatToParts(values);
            if (parts.length === 1) {
              return parts[0].value;
            }
            var result = parts.reduce(function(all, part) {
              if (!all.length || part.type !== formatters_1.PART_TYPE.literal || typeof all[all.length - 1] !== "string") {
                all.push(part.value);
              } else {
                all[all.length - 1] += part.value;
              }
              return all;
            }, []);
            if (result.length <= 1) {
              return result[0] || "";
            }
            return result;
          };
          this.formatToParts = function(values) {
            return (0, formatters_1.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, void 0, _this.message);
          };
          this.resolvedOptions = function() {
            var _a;
            return {
              locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
            };
          };
          this.getAst = function() {
            return _this.ast;
          };
          this.locales = locales;
          this.resolvedLocale = IntlMessageFormat2.resolveLocale(locales);
          if (typeof message === "string") {
            this.message = message;
            if (!IntlMessageFormat2.__parse) {
              throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
            }
            this.ast = IntlMessageFormat2.__parse(message, {
              ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
              locale: this.resolvedLocale
            });
          } else {
            this.ast = message;
          }
          if (!Array.isArray(this.ast)) {
            throw new TypeError("A message must be provided as a String or AST.");
          }
          this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
          this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
        }
        Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
          get: function() {
            if (!IntlMessageFormat2.memoizedDefaultLocale) {
              IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
            }
            return IntlMessageFormat2.memoizedDefaultLocale;
          },
          enumerable: false,
          configurable: true
        });
        IntlMessageFormat2.memoizedDefaultLocale = null;
        IntlMessageFormat2.resolveLocale = function(locales) {
          if (typeof Intl.Locale === "undefined") {
            return;
          }
          var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
          if (supportedLocales.length > 0) {
            return new Intl.Locale(supportedLocales[0]);
          }
          return new Intl.Locale(typeof locales === "string" ? locales : locales[0]);
        };
        IntlMessageFormat2.__parse = icu_messageformat_parser_1.parse;
        IntlMessageFormat2.formats = {
          number: {
            integer: {
              maximumFractionDigits: 0
            },
            currency: {
              style: "currency"
            },
            percent: {
              style: "percent"
            }
          },
          date: {
            short: {
              month: "numeric",
              day: "numeric",
              year: "2-digit"
            },
            medium: {
              month: "short",
              day: "numeric",
              year: "numeric"
            },
            long: {
              month: "long",
              day: "numeric",
              year: "numeric"
            },
            full: {
              weekday: "long",
              month: "long",
              day: "numeric",
              year: "numeric"
            }
          },
          time: {
            short: {
              hour: "numeric",
              minute: "numeric"
            },
            medium: {
              hour: "numeric",
              minute: "numeric",
              second: "numeric"
            },
            long: {
              hour: "numeric",
              minute: "numeric",
              second: "numeric",
              timeZoneName: "short"
            },
            full: {
              hour: "numeric",
              minute: "numeric",
              second: "numeric",
              timeZoneName: "short"
            }
          }
        };
        return IntlMessageFormat2;
      }();
      exports.IntlMessageFormat = IntlMessageFormat;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl-messageformat/index.js
  var require_intl_messageformat = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl-messageformat/index.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_core();
      (0, tslib_1.__exportStar)(require_formatters(), exports);
      (0, tslib_1.__exportStar)(require_core(), exports);
      (0, tslib_1.__exportStar)(require_error2(), exports);
      exports.default = core_1.IntlMessageFormat;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/error.js
  var require_error3 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/error.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MissingTranslationError = exports.MessageFormatError = exports.IntlFormatError = exports.MissingDataError = exports.InvalidConfigError = exports.UnsupportedFormatterError = exports.IntlError = exports.IntlErrorCode = void 0;
      var tslib_1 = require_tslib();
      var IntlErrorCode2;
      (function(IntlErrorCode3) {
        IntlErrorCode3["FORMAT_ERROR"] = "FORMAT_ERROR";
        IntlErrorCode3["UNSUPPORTED_FORMATTER"] = "UNSUPPORTED_FORMATTER";
        IntlErrorCode3["INVALID_CONFIG"] = "INVALID_CONFIG";
        IntlErrorCode3["MISSING_DATA"] = "MISSING_DATA";
        IntlErrorCode3["MISSING_TRANSLATION"] = "MISSING_TRANSLATION";
      })(IntlErrorCode2 = exports.IntlErrorCode || (exports.IntlErrorCode = {}));
      var IntlError2 = function(_super) {
        (0, tslib_1.__extends)(IntlError3, _super);
        function IntlError3(code, message, exception) {
          var _this = this;
          var err = exception ? exception instanceof Error ? exception : new Error(String(exception)) : void 0;
          _this = _super.call(this, "[@formatjs/intl Error ".concat(code, "] ").concat(message, "\n").concat(err ? "\n".concat(err.message, "\n").concat(err.stack) : "")) || this;
          _this.code = code;
          if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, IntlError3);
          }
          return _this;
        }
        return IntlError3;
      }(Error);
      exports.IntlError = IntlError2;
      var UnsupportedFormatterError2 = function(_super) {
        (0, tslib_1.__extends)(UnsupportedFormatterError3, _super);
        function UnsupportedFormatterError3(message, exception) {
          return _super.call(this, IntlErrorCode2.UNSUPPORTED_FORMATTER, message, exception) || this;
        }
        return UnsupportedFormatterError3;
      }(IntlError2);
      exports.UnsupportedFormatterError = UnsupportedFormatterError2;
      var InvalidConfigError2 = function(_super) {
        (0, tslib_1.__extends)(InvalidConfigError3, _super);
        function InvalidConfigError3(message, exception) {
          return _super.call(this, IntlErrorCode2.INVALID_CONFIG, message, exception) || this;
        }
        return InvalidConfigError3;
      }(IntlError2);
      exports.InvalidConfigError = InvalidConfigError2;
      var MissingDataError2 = function(_super) {
        (0, tslib_1.__extends)(MissingDataError3, _super);
        function MissingDataError3(message, exception) {
          return _super.call(this, IntlErrorCode2.MISSING_DATA, message, exception) || this;
        }
        return MissingDataError3;
      }(IntlError2);
      exports.MissingDataError = MissingDataError2;
      var IntlFormatError = function(_super) {
        (0, tslib_1.__extends)(IntlFormatError2, _super);
        function IntlFormatError2(message, locale, exception) {
          return _super.call(this, IntlErrorCode2.FORMAT_ERROR, "".concat(message, "\nLocale: ").concat(locale, "\n"), exception) || this;
        }
        return IntlFormatError2;
      }(IntlError2);
      exports.IntlFormatError = IntlFormatError;
      var MessageFormatError2 = function(_super) {
        (0, tslib_1.__extends)(MessageFormatError3, _super);
        function MessageFormatError3(message, locale, descriptor, exception) {
          var _this = _super.call(this, "".concat(message, "\nMessageID: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.id, "\nDefault Message: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.defaultMessage, "\nDescription: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.description, "\n"), locale, exception) || this;
          _this.descriptor = descriptor;
          return _this;
        }
        return MessageFormatError3;
      }(IntlFormatError);
      exports.MessageFormatError = MessageFormatError2;
      var MissingTranslationError2 = function(_super) {
        (0, tslib_1.__extends)(MissingTranslationError3, _super);
        function MissingTranslationError3(descriptor, locale) {
          var _this = _super.call(this, IntlErrorCode2.MISSING_TRANSLATION, 'Missing message: "'.concat(descriptor.id, '" for locale "').concat(locale, '", using ').concat(descriptor.defaultMessage ? "default message (".concat(typeof descriptor.defaultMessage === "string" ? descriptor.defaultMessage : descriptor.defaultMessage.map(function(e) {
            var _a;
            return (_a = e.value) !== null && _a !== void 0 ? _a : JSON.stringify(e);
          }).join(), ")") : "id", " as fallback.")) || this;
          _this.descriptor = descriptor;
          return _this;
        }
        return MissingTranslationError3;
      }(IntlError2);
      exports.MissingTranslationError = MissingTranslationError2;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/utils.js
  var require_utils3 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/utils.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getNamedFormat = exports.createFormatters = exports.createIntlCache = exports.DEFAULT_INTL_CONFIG = exports.filterProps = void 0;
      var tslib_1 = require_tslib();
      var intl_messageformat_1 = require_intl_messageformat();
      var fast_memoize_1 = (0, tslib_1.__importStar)(require_fast_memoize());
      var error_1 = require_error3();
      function filterProps(props, allowlist, defaults) {
        if (defaults === void 0) {
          defaults = {};
        }
        return allowlist.reduce(function(filtered, name) {
          if (name in props) {
            filtered[name] = props[name];
          } else if (name in defaults) {
            filtered[name] = defaults[name];
          }
          return filtered;
        }, {});
      }
      exports.filterProps = filterProps;
      var defaultErrorHandler = function(error) {
        if (true) {
          console.error(error);
        }
      };
      var defaultWarnHandler = function(warning) {
        if (true) {
          console.warn(warning);
        }
      };
      exports.DEFAULT_INTL_CONFIG = {
        formats: {},
        messages: {},
        timeZone: void 0,
        defaultLocale: "en",
        defaultFormats: {},
        fallbackOnEmptyString: true,
        onError: defaultErrorHandler,
        onWarn: defaultWarnHandler
      };
      function createIntlCache3() {
        return {
          dateTime: {},
          number: {},
          message: {},
          relativeTime: {},
          pluralRules: {},
          list: {},
          displayNames: {}
        };
      }
      exports.createIntlCache = createIntlCache3;
      function createFastMemoizeCache(store) {
        return {
          create: function() {
            return {
              get: function(key) {
                return store[key];
              },
              set: function(key, value) {
                store[key] = value;
              }
            };
          }
        };
      }
      function createFormatters(cache) {
        if (cache === void 0) {
          cache = createIntlCache3();
        }
        var RelativeTimeFormat = Intl.RelativeTimeFormat;
        var ListFormat = Intl.ListFormat;
        var DisplayNames = Intl.DisplayNames;
        var getDateTimeFormat = (0, fast_memoize_1.default)(function() {
          var _a;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0, tslib_1.__spreadArray)([void 0], args, false)))();
        }, {
          cache: createFastMemoizeCache(cache.dateTime),
          strategy: fast_memoize_1.strategies.variadic
        });
        var getNumberFormat = (0, fast_memoize_1.default)(function() {
          var _a;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return new ((_a = Intl.NumberFormat).bind.apply(_a, (0, tslib_1.__spreadArray)([void 0], args, false)))();
        }, {
          cache: createFastMemoizeCache(cache.number),
          strategy: fast_memoize_1.strategies.variadic
        });
        var getPluralRules = (0, fast_memoize_1.default)(function() {
          var _a;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return new ((_a = Intl.PluralRules).bind.apply(_a, (0, tslib_1.__spreadArray)([void 0], args, false)))();
        }, {
          cache: createFastMemoizeCache(cache.pluralRules),
          strategy: fast_memoize_1.strategies.variadic
        });
        return {
          getDateTimeFormat: getDateTimeFormat,
          getNumberFormat: getNumberFormat,
          getMessageFormat: (0, fast_memoize_1.default)(function(message, locales, overrideFormats, opts) {
            return new intl_messageformat_1.IntlMessageFormat(message, locales, overrideFormats, (0, tslib_1.__assign)({ formatters: {
              getNumberFormat: getNumberFormat,
              getDateTimeFormat: getDateTimeFormat,
              getPluralRules: getPluralRules
            } }, opts || {}));
          }, {
            cache: createFastMemoizeCache(cache.message),
            strategy: fast_memoize_1.strategies.variadic
          }),
          getRelativeTimeFormat: (0, fast_memoize_1.default)(function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return new (RelativeTimeFormat.bind.apply(RelativeTimeFormat, (0, tslib_1.__spreadArray)([void 0], args, false)))();
          }, {
            cache: createFastMemoizeCache(cache.relativeTime),
            strategy: fast_memoize_1.strategies.variadic
          }),
          getPluralRules: getPluralRules,
          getListFormat: (0, fast_memoize_1.default)(function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return new (ListFormat.bind.apply(ListFormat, (0, tslib_1.__spreadArray)([void 0], args, false)))();
          }, {
            cache: createFastMemoizeCache(cache.list),
            strategy: fast_memoize_1.strategies.variadic
          }),
          getDisplayNames: (0, fast_memoize_1.default)(function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return new (DisplayNames.bind.apply(DisplayNames, (0, tslib_1.__spreadArray)([void 0], args, false)))();
          }, {
            cache: createFastMemoizeCache(cache.displayNames),
            strategy: fast_memoize_1.strategies.variadic
          })
        };
      }
      exports.createFormatters = createFormatters;
      function getNamedFormat(formats, type, name, onError) {
        var formatType = formats && formats[type];
        var format;
        if (formatType) {
          format = formatType[name];
        }
        if (format) {
          return format;
        }
        onError(new error_1.UnsupportedFormatterError("No ".concat(type, " format named: ").concat(name)));
      }
      exports.getNamedFormat = getNamedFormat;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/message.js
  var require_message = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/message.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formatMessage = void 0;
      var tslib_1 = require_tslib();
      var ecma402_abstract_1 = require_ecma402_abstract();
      var intl_messageformat_1 = require_intl_messageformat();
      var error_1 = require_error3();
      var icu_messageformat_parser_1 = require_icu_messageformat_parser();
      function setTimeZoneInOptions(opts, timeZone) {
        return Object.keys(opts).reduce(function(all, k) {
          all[k] = (0, tslib_1.__assign)({ timeZone: timeZone }, opts[k]);
          return all;
        }, {});
      }
      function deepMergeOptions(opts1, opts2) {
        var keys = Object.keys((0, tslib_1.__assign)((0, tslib_1.__assign)({}, opts1), opts2));
        return keys.reduce(function(all, k) {
          all[k] = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, opts1[k] || {}), opts2[k] || {});
          return all;
        }, {});
      }
      function deepMergeFormatsAndSetTimeZone(f1, timeZone) {
        if (!timeZone) {
          return f1;
        }
        var mfFormats = intl_messageformat_1.IntlMessageFormat.formats;
        return (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });
      }
      var formatMessage2 = function(_a, state, messageDescriptor, values, opts) {
        var locale = _a.locale, formats = _a.formats, messages = _a.messages, defaultLocale = _a.defaultLocale, defaultFormats = _a.defaultFormats, fallbackOnEmptyString = _a.fallbackOnEmptyString, onError = _a.onError, timeZone = _a.timeZone, defaultRichTextElements = _a.defaultRichTextElements;
        if (messageDescriptor === void 0) {
          messageDescriptor = { id: "" };
        }
        var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;
        (0, ecma402_abstract_1.invariant)(!!msgId, "[@formatjs/intl] An `id` must be provided to format a message. You can either:\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\nto autofix this issue");
        var id = String(msgId);
        var message = messages && Object.prototype.hasOwnProperty.call(messages, id) && messages[id];
        if (Array.isArray(message) && message.length === 1 && message[0].type === icu_messageformat_parser_1.TYPE.literal) {
          return message[0].value;
        }
        if (!values && message && typeof message === "string" && !defaultRichTextElements) {
          return message.replace(/'\{(.*?)\}'/gi, "{$1}");
        }
        values = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, defaultRichTextElements), values || {});
        formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);
        defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);
        if (!message) {
          if (fallbackOnEmptyString === false && message === "") {
            return message;
          }
          if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {
            onError(new error_1.MissingTranslationError(messageDescriptor, locale));
          }
          if (defaultMessage) {
            try {
              var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
              return formatter.format(values);
            } catch (e) {
              onError(new error_1.MessageFormatError('Error formatting default message for: "'.concat(id, '", rendering default message verbatim'), locale, messageDescriptor, e));
              return typeof defaultMessage === "string" ? defaultMessage : id;
            }
          }
          return id;
        }
        try {
          var formatter = state.getMessageFormat(message, locale, formats, (0, tslib_1.__assign)({ formatters: state }, opts || {}));
          return formatter.format(values);
        } catch (e) {
          onError(new error_1.MessageFormatError('Error formatting message: "'.concat(id, '", using ').concat(defaultMessage ? "default message" : "id", " as fallback."), locale, messageDescriptor, e));
        }
        if (defaultMessage) {
          try {
            var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
            return formatter.format(values);
          } catch (e) {
            onError(new error_1.MessageFormatError('Error formatting the default message for: "'.concat(id, '", rendering message verbatim'), locale, messageDescriptor, e));
          }
        }
        if (typeof message === "string") {
          return message;
        }
        if (typeof defaultMessage === "string") {
          return defaultMessage;
        }
        return id;
      };
      exports.formatMessage = formatMessage2;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/dateTime.js
  var require_dateTime = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/dateTime.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formatTimeToParts = exports.formatDateToParts = exports.formatDateTimeRange = exports.formatTime = exports.formatDate = exports.getFormatter = void 0;
      var tslib_1 = require_tslib();
      var utils_1 = require_utils3();
      var error_1 = require_error3();
      var DATE_TIME_FORMAT_OPTIONS = [
        "formatMatcher",
        "timeZone",
        "hour12",
        "weekday",
        "era",
        "year",
        "month",
        "day",
        "hour",
        "minute",
        "second",
        "timeZoneName",
        "hourCycle",
        "dateStyle",
        "timeStyle",
        "calendar",
        "numberingSystem",
        "fractionalSecondDigits"
      ];
      function getFormatter(_a, type, getDateTimeFormat, options) {
        var locale = _a.locale, formats = _a.formats, onError = _a.onError, timeZone = _a.timeZone;
        if (options === void 0) {
          options = {};
        }
        var format = options.format;
        var defaults = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, timeZone && { timeZone: timeZone }), format && (0, utils_1.getNamedFormat)(formats, type, format, onError));
        var filteredOptions = (0, utils_1.filterProps)(options, DATE_TIME_FORMAT_OPTIONS, defaults);
        if (type === "time" && !filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second && !filteredOptions.timeStyle && !filteredOptions.dateStyle) {
          filteredOptions = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, filteredOptions), { hour: "numeric", minute: "numeric" });
        }
        return getDateTimeFormat(locale, filteredOptions);
      }
      exports.getFormatter = getFormatter;
      function formatDate(config, getDateTimeFormat) {
        var _a = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          _a[_i - 2] = arguments[_i];
        }
        var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;
        var date = typeof value === "string" ? new Date(value || 0) : value;
        try {
          return getFormatter(config, "date", getDateTimeFormat, options).format(date);
        } catch (e) {
          config.onError(new error_1.IntlError(error_1.IntlErrorCode.FORMAT_ERROR, "Error formatting date.", e));
        }
        return String(date);
      }
      exports.formatDate = formatDate;
      function formatTime(config, getDateTimeFormat) {
        var _a = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          _a[_i - 2] = arguments[_i];
        }
        var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;
        var date = typeof value === "string" ? new Date(value || 0) : value;
        try {
          return getFormatter(config, "time", getDateTimeFormat, options).format(date);
        } catch (e) {
          config.onError(new error_1.IntlError(error_1.IntlErrorCode.FORMAT_ERROR, "Error formatting time.", e));
        }
        return String(date);
      }
      exports.formatTime = formatTime;
      function formatDateTimeRange(config, getDateTimeFormat) {
        var _a = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          _a[_i - 2] = arguments[_i];
        }
        var from = _a[0], to = _a[1], _b = _a[2], options = _b === void 0 ? {} : _b;
        var timeZone = config.timeZone, locale = config.locale, onError = config.onError;
        var filteredOptions = (0, utils_1.filterProps)(options, DATE_TIME_FORMAT_OPTIONS, timeZone ? { timeZone: timeZone } : {});
        try {
          return getDateTimeFormat(locale, filteredOptions).formatRange(from, to);
        } catch (e) {
          onError(new error_1.IntlError(error_1.IntlErrorCode.FORMAT_ERROR, "Error formatting date time range.", e));
        }
        return String(from);
      }
      exports.formatDateTimeRange = formatDateTimeRange;
      function formatDateToParts(config, getDateTimeFormat) {
        var _a = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          _a[_i - 2] = arguments[_i];
        }
        var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;
        var date = typeof value === "string" ? new Date(value || 0) : value;
        try {
          return getFormatter(config, "date", getDateTimeFormat, options).formatToParts(date);
        } catch (e) {
          config.onError(new error_1.IntlError(error_1.IntlErrorCode.FORMAT_ERROR, "Error formatting date.", e));
        }
        return [];
      }
      exports.formatDateToParts = formatDateToParts;
      function formatTimeToParts(config, getDateTimeFormat) {
        var _a = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          _a[_i - 2] = arguments[_i];
        }
        var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;
        var date = typeof value === "string" ? new Date(value || 0) : value;
        try {
          return getFormatter(config, "time", getDateTimeFormat, options).formatToParts(date);
        } catch (e) {
          config.onError(new error_1.IntlError(error_1.IntlErrorCode.FORMAT_ERROR, "Error formatting time.", e));
        }
        return [];
      }
      exports.formatTimeToParts = formatTimeToParts;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/displayName.js
  var require_displayName = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/displayName.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formatDisplayName = void 0;
      var utils_1 = require_utils3();
      var intl_messageformat_1 = require_intl_messageformat();
      var error_1 = require_error3();
      var DISPLAY_NAMES_OPTONS = [
        "style",
        "type",
        "fallback"
      ];
      function formatDisplayName(_a, getDisplayNames, value, options) {
        var locale = _a.locale, onError = _a.onError;
        var DisplayNames = Intl.DisplayNames;
        if (!DisplayNames) {
          onError(new intl_messageformat_1.FormatError('Intl.DisplayNames is not available in this environment.\nTry polyfilling it using "@formatjs/intl-displaynames"\n', intl_messageformat_1.ErrorCode.MISSING_INTL_API));
        }
        var filteredOptions = (0, utils_1.filterProps)(options, DISPLAY_NAMES_OPTONS);
        try {
          return getDisplayNames(locale, filteredOptions).of(value);
        } catch (e) {
          onError(new error_1.IntlError(error_1.IntlErrorCode.FORMAT_ERROR, "Error formatting display name.", e));
        }
      }
      exports.formatDisplayName = formatDisplayName;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/list.js
  var require_list2 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/list.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formatListToParts = exports.formatList = void 0;
      var tslib_1 = require_tslib();
      var utils_1 = require_utils3();
      var intl_messageformat_1 = require_intl_messageformat();
      var error_1 = require_error3();
      var LIST_FORMAT_OPTIONS = [
        "type",
        "style"
      ];
      var now = Date.now();
      function generateToken(i) {
        return "".concat(now, "_").concat(i, "_").concat(now);
      }
      function formatList(opts, getListFormat, values, options) {
        if (options === void 0) {
          options = {};
        }
        var results = formatListToParts(opts, getListFormat, values, options).reduce(function(all, el) {
          var val = el.value;
          if (typeof val !== "string") {
            all.push(val);
          } else if (typeof all[all.length - 1] === "string") {
            all[all.length - 1] += val;
          } else {
            all.push(val);
          }
          return all;
        }, []);
        return results.length === 1 ? results[0] : results;
      }
      exports.formatList = formatList;
      function formatListToParts(_a, getListFormat, values, options) {
        var locale = _a.locale, onError = _a.onError;
        if (options === void 0) {
          options = {};
        }
        var ListFormat = Intl.ListFormat;
        if (!ListFormat) {
          onError(new intl_messageformat_1.FormatError('Intl.ListFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-listformat"\n', intl_messageformat_1.ErrorCode.MISSING_INTL_API));
        }
        var filteredOptions = (0, utils_1.filterProps)(options, LIST_FORMAT_OPTIONS);
        try {
          var richValues_1 = {};
          var serializedValues = values.map(function(v, i) {
            if (typeof v === "object") {
              var id = generateToken(i);
              richValues_1[id] = v;
              return id;
            }
            return String(v);
          });
          return getListFormat(locale, filteredOptions).formatToParts(serializedValues).map(function(part) {
            return part.type === "literal" ? part : (0, tslib_1.__assign)((0, tslib_1.__assign)({}, part), { value: richValues_1[part.value] || part.value });
          });
        } catch (e) {
          onError(new error_1.IntlError(error_1.IntlErrorCode.FORMAT_ERROR, "Error formatting list.", e));
        }
        return values;
      }
      exports.formatListToParts = formatListToParts;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/plural.js
  var require_plural = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/plural.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formatPlural = void 0;
      var utils_1 = require_utils3();
      var error_1 = require_error3();
      var intl_messageformat_1 = require_intl_messageformat();
      var PLURAL_FORMAT_OPTIONS = ["type"];
      function formatPlural(_a, getPluralRules, value, options) {
        var locale = _a.locale, onError = _a.onError;
        if (options === void 0) {
          options = {};
        }
        if (!Intl.PluralRules) {
          onError(new intl_messageformat_1.FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', intl_messageformat_1.ErrorCode.MISSING_INTL_API));
        }
        var filteredOptions = (0, utils_1.filterProps)(options, PLURAL_FORMAT_OPTIONS);
        try {
          return getPluralRules(locale, filteredOptions).select(value);
        } catch (e) {
          onError(new error_1.IntlFormatError("Error formatting plural.", locale, e));
        }
        return "other";
      }
      exports.formatPlural = formatPlural;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/relativeTime.js
  var require_relativeTime = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/relativeTime.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formatRelativeTime = void 0;
      var utils_1 = require_utils3();
      var intl_messageformat_1 = require_intl_messageformat();
      var error_1 = require_error3();
      var RELATIVE_TIME_FORMAT_OPTIONS = ["numeric", "style"];
      function getFormatter(_a, getRelativeTimeFormat, options) {
        var locale = _a.locale, formats = _a.formats, onError = _a.onError;
        if (options === void 0) {
          options = {};
        }
        var format = options.format;
        var defaults = !!format && (0, utils_1.getNamedFormat)(formats, "relative", format, onError) || {};
        var filteredOptions = (0, utils_1.filterProps)(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);
        return getRelativeTimeFormat(locale, filteredOptions);
      }
      function formatRelativeTime(config, getRelativeTimeFormat, value, unit, options) {
        if (options === void 0) {
          options = {};
        }
        if (!unit) {
          unit = "second";
        }
        var RelativeTimeFormat = Intl.RelativeTimeFormat;
        if (!RelativeTimeFormat) {
          config.onError(new intl_messageformat_1.FormatError('Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-relativetimeformat"\n', intl_messageformat_1.ErrorCode.MISSING_INTL_API));
        }
        try {
          return getFormatter(config, getRelativeTimeFormat, options).format(value, unit);
        } catch (e) {
          config.onError(new error_1.IntlFormatError("Error formatting relative time.", config.locale, e));
        }
        return String(value);
      }
      exports.formatRelativeTime = formatRelativeTime;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/number.js
  var require_number3 = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/number.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formatNumberToParts = exports.formatNumber = exports.getFormatter = void 0;
      var utils_1 = require_utils3();
      var error_1 = require_error3();
      var NUMBER_FORMAT_OPTIONS = [
        "style",
        "currency",
        "currencyDisplay",
        "unit",
        "unitDisplay",
        "useGrouping",
        "minimumIntegerDigits",
        "minimumFractionDigits",
        "maximumFractionDigits",
        "minimumSignificantDigits",
        "maximumSignificantDigits",
        "compactDisplay",
        "currencyDisplay",
        "currencySign",
        "notation",
        "signDisplay",
        "unit",
        "unitDisplay",
        "numberingSystem"
      ];
      function getFormatter(_a, getNumberFormat, options) {
        var locale = _a.locale, formats = _a.formats, onError = _a.onError;
        if (options === void 0) {
          options = {};
        }
        var format = options.format;
        var defaults = format && (0, utils_1.getNamedFormat)(formats, "number", format, onError) || {};
        var filteredOptions = (0, utils_1.filterProps)(options, NUMBER_FORMAT_OPTIONS, defaults);
        return getNumberFormat(locale, filteredOptions);
      }
      exports.getFormatter = getFormatter;
      function formatNumber(config, getNumberFormat, value, options) {
        if (options === void 0) {
          options = {};
        }
        try {
          return getFormatter(config, getNumberFormat, options).format(value);
        } catch (e) {
          config.onError(new error_1.IntlError(error_1.IntlErrorCode.FORMAT_ERROR, "Error formatting number.", e));
        }
        return String(value);
      }
      exports.formatNumber = formatNumber;
      function formatNumberToParts(config, getNumberFormat, value, options) {
        if (options === void 0) {
          options = {};
        }
        try {
          return getFormatter(config, getNumberFormat, options).formatToParts(value);
        } catch (e) {
          config.onError(new error_1.IntlError(error_1.IntlErrorCode.FORMAT_ERROR, "Error formatting number.", e));
        }
        return [];
      }
      exports.formatNumberToParts = formatNumberToParts;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/src/create-intl.js
  var require_create_intl = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/src/create-intl.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createIntl = void 0;
      var tslib_1 = require_tslib();
      var utils_1 = require_utils3();
      var error_1 = require_error3();
      var number_1 = require_number3();
      var relativeTime_1 = require_relativeTime();
      var dateTime_1 = require_dateTime();
      var plural_1 = require_plural();
      var message_1 = require_message();
      var list_1 = require_list2();
      var displayName_1 = require_displayName();
      function messagesContainString(messages) {
        var firstMessage = messages ? messages[Object.keys(messages)[0]] : void 0;
        return typeof firstMessage === "string";
      }
      function verifyConfigMessages(config) {
        if (config.onWarn && config.defaultRichTextElements && messagesContainString(config.messages || {})) {
          config.onWarn('[@formatjs/intl] "defaultRichTextElements" was specified but "message" was not pre-compiled. \nPlease consider using "@formatjs/cli" to pre-compile your messages for performance.\nFor more details see https://formatjs.io/docs/getting-started/message-distribution');
        }
      }
      function createIntl2(config, cache) {
        var formatters = (0, utils_1.createFormatters)(cache);
        var resolvedConfig = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, utils_1.DEFAULT_INTL_CONFIG), config);
        var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;
        if (!locale) {
          if (onError) {
            onError(new error_1.InvalidConfigError('"locale" was not configured, using "'.concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details')));
          }
          resolvedConfig.locale = resolvedConfig.defaultLocale || "en";
        } else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {
          onError(new error_1.MissingDataError('Missing locale data for locale: "'.concat(locale, '" in Intl.NumberFormat. Using default locale: "').concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details')));
        } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length && onError) {
          onError(new error_1.MissingDataError('Missing locale data for locale: "'.concat(locale, '" in Intl.DateTimeFormat. Using default locale: "').concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details')));
        }
        verifyConfigMessages(resolvedConfig);
        return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, resolvedConfig), { formatters: formatters, formatNumber: number_1.formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: number_1.formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: relativeTime_1.formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: dateTime_1.formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: dateTime_1.formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: dateTime_1.formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateTimeRange: dateTime_1.formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: dateTime_1.formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: plural_1.formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), formatMessage: message_1.formatMessage.bind(null, resolvedConfig, formatters), $t: message_1.formatMessage.bind(null, resolvedConfig, formatters), formatList: list_1.formatList.bind(null, resolvedConfig, formatters.getListFormat), formatListToParts: list_1.formatListToParts.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: displayName_1.formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames) });
      }
      exports.createIntl = createIntl2;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/intl/index.js
  var require_intl = __commonJS({
    "bazel-out/darwin-fastbuild/bin/packages/intl/index.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createIntl = exports.formatNumberToParts = exports.formatNumber = exports.formatRelativeTime = exports.formatPlural = exports.formatList = exports.formatDisplayName = exports.formatTimeToParts = exports.formatTime = exports.formatDateToParts = exports.formatDate = exports.formatMessage = exports.getNamedFormat = exports.createFormatters = exports.DEFAULT_INTL_CONFIG = exports.filterProps = exports.createIntlCache = exports.defineMessage = exports.defineMessages = void 0;
      var tslib_1 = require_tslib();
      (0, tslib_1.__exportStar)(require_types(), exports);
      function defineMessages2(msgs) {
        return msgs;
      }
      exports.defineMessages = defineMessages2;
      function defineMessage2(msg) {
        return msg;
      }
      exports.defineMessage = defineMessage2;
      var utils_1 = require_utils3();
      Object.defineProperty(exports, "createIntlCache", { enumerable: true, get: function() {
        return utils_1.createIntlCache;
      } });
      Object.defineProperty(exports, "filterProps", { enumerable: true, get: function() {
        return utils_1.filterProps;
      } });
      Object.defineProperty(exports, "DEFAULT_INTL_CONFIG", { enumerable: true, get: function() {
        return utils_1.DEFAULT_INTL_CONFIG;
      } });
      Object.defineProperty(exports, "createFormatters", { enumerable: true, get: function() {
        return utils_1.createFormatters;
      } });
      Object.defineProperty(exports, "getNamedFormat", { enumerable: true, get: function() {
        return utils_1.getNamedFormat;
      } });
      (0, tslib_1.__exportStar)(require_error3(), exports);
      var message_1 = require_message();
      Object.defineProperty(exports, "formatMessage", { enumerable: true, get: function() {
        return message_1.formatMessage;
      } });
      var dateTime_1 = require_dateTime();
      Object.defineProperty(exports, "formatDate", { enumerable: true, get: function() {
        return dateTime_1.formatDate;
      } });
      Object.defineProperty(exports, "formatDateToParts", { enumerable: true, get: function() {
        return dateTime_1.formatDateToParts;
      } });
      Object.defineProperty(exports, "formatTime", { enumerable: true, get: function() {
        return dateTime_1.formatTime;
      } });
      Object.defineProperty(exports, "formatTimeToParts", { enumerable: true, get: function() {
        return dateTime_1.formatTimeToParts;
      } });
      var displayName_1 = require_displayName();
      Object.defineProperty(exports, "formatDisplayName", { enumerable: true, get: function() {
        return displayName_1.formatDisplayName;
      } });
      var list_1 = require_list2();
      Object.defineProperty(exports, "formatList", { enumerable: true, get: function() {
        return list_1.formatList;
      } });
      var plural_1 = require_plural();
      Object.defineProperty(exports, "formatPlural", { enumerable: true, get: function() {
        return plural_1.formatPlural;
      } });
      var relativeTime_1 = require_relativeTime();
      Object.defineProperty(exports, "formatRelativeTime", { enumerable: true, get: function() {
        return relativeTime_1.formatRelativeTime;
      } });
      var number_1 = require_number3();
      Object.defineProperty(exports, "formatNumber", { enumerable: true, get: function() {
        return number_1.formatNumber;
      } });
      Object.defineProperty(exports, "formatNumberToParts", { enumerable: true, get: function() {
        return number_1.formatNumberToParts;
      } });
      var create_intl_1 = require_create_intl();
      Object.defineProperty(exports, "createIntl", { enumerable: true, get: function() {
        return create_intl_1.createIntl;
      } });
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/index.js
  var lib_exports = {};
  __export(lib_exports, {
    FormattedDate: function() {
      return FormattedDate;
    },
    FormattedDateParts: function() {
      return FormattedDateParts;
    },
    FormattedDateTimeRange: function() {
      return dateTimeRange_default;
    },
    FormattedDisplayName: function() {
      return FormattedDisplayName;
    },
    FormattedList: function() {
      return FormattedList;
    },
    FormattedListParts: function() {
      return FormattedListParts;
    },
    FormattedMessage: function() {
      return message_default;
    },
    FormattedNumber: function() {
      return FormattedNumber;
    },
    FormattedNumberParts: function() {
      return FormattedNumberParts;
    },
    FormattedPlural: function() {
      return plural_default;
    },
    FormattedRelativeTime: function() {
      return relative_default;
    },
    FormattedTime: function() {
      return FormattedTime;
    },
    FormattedTimeParts: function() {
      return FormattedTimeParts;
    },
    IntlContext: function() {
      return Context;
    },
    IntlProvider: function() {
      return provider_default;
    },
    InvalidConfigError: function() {
      return import_intl3.InvalidConfigError;
    },
    MessageFormatError: function() {
      return import_intl3.MessageFormatError;
    },
    MissingDataError: function() {
      return import_intl3.MissingDataError;
    },
    MissingTranslationError: function() {
      return import_intl3.MissingTranslationError;
    },
    RawIntlProvider: function() {
      return Provider;
    },
    ReactIntlError: function() {
      return import_intl3.IntlError;
    },
    ReactIntlErrorCode: function() {
      return import_intl3.IntlErrorCode;
    },
    UnsupportedFormatterError: function() {
      return import_intl3.UnsupportedFormatterError;
    },
    createIntl: function() {
      return createIntl;
    },
    createIntlCache: function() {
      return import_intl3.createIntlCache;
    },
    defineMessage: function() {
      return defineMessage;
    },
    defineMessages: function() {
      return defineMessages;
    },
    injectIntl: function() {
      return injectIntl;
    },
    useIntl: function() {
      return useIntl;
    }
  });

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/createFormattedComponent.js
  var import_tslib3 = __toESM(require_tslib());
  var React4 = __toESM(window.React);

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/useIntl.js
  var React3 = __toESM(window.React);

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/injectIntl.js
  var import_tslib2 = __toESM(require_tslib());
  var React2 = __toESM(window.React);
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/utils.js
  var import_tslib = __toESM(require_tslib());
  var React = __toESM(window.React);
  var import_ecma402_abstract = __toESM(require_ecma402_abstract());
  var import_intl = __toESM(require_intl());
  function invariantIntlContext(intl) {
    (0, import_ecma402_abstract.invariant)(intl, "[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry.");
  }
  var DEFAULT_INTL_CONFIG = (0, import_tslib.__assign)((0, import_tslib.__assign)({}, import_intl.DEFAULT_INTL_CONFIG), { textComponent: React.Fragment });
  function assignUniqueKeysToParts(formatXMLElementFn) {
    return function(parts) {
      return formatXMLElementFn(React.Children.toArray(parts));
    };
  }
  function shallowEqual(objA, objB) {
    if (objA === objB) {
      return true;
    }
    if (!objA || !objB) {
      return false;
    }
    var aKeys = Object.keys(objA);
    var bKeys = Object.keys(objB);
    var len = aKeys.length;
    if (bKeys.length !== len) {
      return false;
    }
    for (var i = 0; i < len; i++) {
      var key = aKeys[i];
      if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {
        return false;
      }
    }
    return true;
  }

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/injectIntl.js
  function getDisplayName(Component) {
    return Component.displayName || Component.name || "Component";
  }
  var IntlContext = React2.createContext(null);
  var IntlConsumer = IntlContext.Consumer;
  var IntlProvider = IntlContext.Provider;
  var Provider = IntlProvider;
  var Context = IntlContext;
  function injectIntl(WrappedComponent, options) {
    var _a = options || {}, _b = _a.intlPropName, intlPropName = _b === void 0 ? "intl" : _b, _c = _a.forwardRef, forwardRef2 = _c === void 0 ? false : _c, _d = _a.enforceContext, enforceContext = _d === void 0 ? true : _d;
    var WithIntl = function(props) {
      return React2.createElement(IntlConsumer, null, function(intl) {
        var _a2;
        if (enforceContext) {
          invariantIntlContext(intl);
        }
        var intlProp = (_a2 = {}, _a2[intlPropName] = intl, _a2);
        return React2.createElement(WrappedComponent, (0, import_tslib2.__assign)({}, props, intlProp, { ref: forwardRef2 ? props.forwardedRef : null }));
      });
    };
    WithIntl.displayName = "injectIntl(".concat(getDisplayName(WrappedComponent), ")");
    WithIntl.WrappedComponent = WrappedComponent;
    if (forwardRef2) {
      return (0, import_hoist_non_react_statics.default)(React2.forwardRef(function(props, ref) {
        return React2.createElement(WithIntl, (0, import_tslib2.__assign)({}, props, { forwardedRef: ref }));
      }), WrappedComponent);
    }
    return (0, import_hoist_non_react_statics.default)(WithIntl, WrappedComponent);
  }

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/useIntl.js
  function useIntl() {
    var intl = React3.useContext(Context);
    invariantIntlContext(intl);
    return intl;
  }

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/createFormattedComponent.js
  var DisplayName;
  (function(DisplayName2) {
    DisplayName2["formatDate"] = "FormattedDate";
    DisplayName2["formatTime"] = "FormattedTime";
    DisplayName2["formatNumber"] = "FormattedNumber";
    DisplayName2["formatList"] = "FormattedList";
    DisplayName2["formatDisplayName"] = "FormattedDisplayName";
  })(DisplayName || (DisplayName = {}));
  var DisplayNameParts;
  (function(DisplayNameParts2) {
    DisplayNameParts2["formatDate"] = "FormattedDateParts";
    DisplayNameParts2["formatTime"] = "FormattedTimeParts";
    DisplayNameParts2["formatNumber"] = "FormattedNumberParts";
    DisplayNameParts2["formatList"] = "FormattedListParts";
  })(DisplayNameParts || (DisplayNameParts = {}));
  var FormattedNumberParts = function(props) {
    var intl = useIntl();
    var value = props.value, children = props.children, formatProps = (0, import_tslib3.__rest)(props, ["value", "children"]);
    return children(intl.formatNumberToParts(value, formatProps));
  };
  FormattedNumberParts.displayName = "FormattedNumberParts";
  var FormattedListParts = function(props) {
    var intl = useIntl();
    var value = props.value, children = props.children, formatProps = (0, import_tslib3.__rest)(props, ["value", "children"]);
    return children(intl.formatListToParts(value, formatProps));
  };
  FormattedNumberParts.displayName = "FormattedNumberParts";
  function createFormattedDateTimePartsComponent(name) {
    var ComponentParts = function(props) {
      var intl = useIntl();
      var value = props.value, children = props.children, formatProps = (0, import_tslib3.__rest)(props, ["value", "children"]);
      var date = typeof value === "string" ? new Date(value || 0) : value;
      var formattedParts = name === "formatDate" ? intl.formatDateToParts(date, formatProps) : intl.formatTimeToParts(date, formatProps);
      return children(formattedParts);
    };
    ComponentParts.displayName = DisplayNameParts[name];
    return ComponentParts;
  }
  function createFormattedComponent(name) {
    var Component = function(props) {
      var intl = useIntl();
      var value = props.value, children = props.children, formatProps = (0, import_tslib3.__rest)(props, ["value", "children"]);
      var formattedValue = intl[name](value, formatProps);
      if (typeof children === "function") {
        return children(formattedValue);
      }
      var Text = intl.textComponent || React4.Fragment;
      return React4.createElement(Text, null, formattedValue);
    };
    Component.displayName = DisplayName[name];
    return Component;
  }

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/provider.js
  var import_tslib4 = __toESM(require_tslib());
  var React5 = __toESM(window.React);
  var import_intl2 = __toESM(require_intl());
  var import_intl_messageformat = __toESM(require_intl_messageformat());
  function processIntlConfig(config) {
    return {
      locale: config.locale,
      timeZone: config.timeZone,
      fallbackOnEmptyString: config.fallbackOnEmptyString,
      formats: config.formats,
      textComponent: config.textComponent,
      messages: config.messages,
      defaultLocale: config.defaultLocale,
      defaultFormats: config.defaultFormats,
      onError: config.onError,
      onWarn: config.onWarn,
      wrapRichTextChunksInFragment: config.wrapRichTextChunksInFragment,
      defaultRichTextElements: config.defaultRichTextElements
    };
  }
  function assignUniqueKeysToFormatXMLElementFnArgument(values) {
    if (!values) {
      return values;
    }
    return Object.keys(values).reduce(function(acc, k) {
      var v = values[k];
      acc[k] = (0, import_intl_messageformat.isFormatXMLElementFn)(v) ? assignUniqueKeysToParts(v) : v;
      return acc;
    }, {});
  }
  var formatMessage = function(config, formatters, descriptor, rawValues) {
    var rest = [];
    for (var _i = 4; _i < arguments.length; _i++) {
      rest[_i - 4] = arguments[_i];
    }
    var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);
    var chunks = import_intl2.formatMessage.apply(void 0, (0, import_tslib4.__spreadArray)([
      config,
      formatters,
      descriptor,
      values
    ], rest, false));
    if (Array.isArray(chunks)) {
      return React5.Children.toArray(chunks);
    }
    return chunks;
  };
  var createIntl = function(_a, cache) {
    var rawDefaultRichTextElements = _a.defaultRichTextElements, config = (0, import_tslib4.__rest)(_a, ["defaultRichTextElements"]);
    var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);
    var coreIntl = (0, import_intl2.createIntl)((0, import_tslib4.__assign)((0, import_tslib4.__assign)((0, import_tslib4.__assign)({}, DEFAULT_INTL_CONFIG), config), { defaultRichTextElements: defaultRichTextElements }), cache);
    var resolvedConfig = {
      locale: coreIntl.locale,
      timeZone: coreIntl.timeZone,
      fallbackOnEmptyString: coreIntl.fallbackOnEmptyString,
      formats: coreIntl.formats,
      defaultLocale: coreIntl.defaultLocale,
      defaultFormats: coreIntl.defaultFormats,
      messages: coreIntl.messages,
      onError: coreIntl.onError,
      defaultRichTextElements: defaultRichTextElements
    };
    return (0, import_tslib4.__assign)((0, import_tslib4.__assign)({}, coreIntl), { formatMessage: formatMessage.bind(null, resolvedConfig, coreIntl.formatters), $t: formatMessage.bind(null, resolvedConfig, coreIntl.formatters) });
  };
  var IntlProvider2 = function(_super) {
    (0, import_tslib4.__extends)(IntlProvider3, _super);
    function IntlProvider3() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.cache = (0, import_intl2.createIntlCache)();
      _this.state = {
        cache: _this.cache,
        intl: createIntl(processIntlConfig(_this.props), _this.cache),
        prevConfig: processIntlConfig(_this.props)
      };
      return _this;
    }
    IntlProvider3.getDerivedStateFromProps = function(props, _a) {
      var prevConfig = _a.prevConfig, cache = _a.cache;
      var config = processIntlConfig(props);
      if (!shallowEqual(prevConfig, config)) {
        return {
          intl: createIntl(config, cache),
          prevConfig: config
        };
      }
      return null;
    };
    IntlProvider3.prototype.render = function() {
      invariantIntlContext(this.state.intl);
      return React5.createElement(Provider, { value: this.state.intl }, this.props.children);
    };
    IntlProvider3.displayName = "IntlProvider";
    IntlProvider3.defaultProps = DEFAULT_INTL_CONFIG;
    return IntlProvider3;
  }(React5.PureComponent);
  var provider_default = IntlProvider2;

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/relative.js
  var import_tslib5 = __toESM(require_tslib());
  var React6 = __toESM(window.React);
  var import_ecma402_abstract2 = __toESM(require_ecma402_abstract());
  var MINUTE = 60;
  var HOUR = 60 * 60;
  var DAY = 60 * 60 * 24;
  function selectUnit(seconds) {
    var absValue = Math.abs(seconds);
    if (absValue < MINUTE) {
      return "second";
    }
    if (absValue < HOUR) {
      return "minute";
    }
    if (absValue < DAY) {
      return "hour";
    }
    return "day";
  }
  function getDurationInSeconds(unit) {
    switch (unit) {
      case "second":
        return 1;
      case "minute":
        return MINUTE;
      case "hour":
        return HOUR;
      default:
        return DAY;
    }
  }
  function valueToSeconds(value, unit) {
    if (!value) {
      return 0;
    }
    switch (unit) {
      case "second":
        return value;
      case "minute":
        return value * MINUTE;
      default:
        return value * HOUR;
    }
  }
  var INCREMENTABLE_UNITS = [
    "second",
    "minute",
    "hour"
  ];
  function canIncrement(unit) {
    if (unit === void 0) {
      unit = "second";
    }
    return INCREMENTABLE_UNITS.indexOf(unit) > -1;
  }
  var SimpleFormattedRelativeTime = function(props) {
    var _a = useIntl(), formatRelativeTime = _a.formatRelativeTime, Text = _a.textComponent;
    var children = props.children, value = props.value, unit = props.unit, otherProps = (0, import_tslib5.__rest)(props, ["children", "value", "unit"]);
    var formattedRelativeTime = formatRelativeTime(value || 0, unit, otherProps);
    if (typeof children === "function") {
      return children(formattedRelativeTime);
    }
    if (Text) {
      return React6.createElement(Text, null, formattedRelativeTime);
    }
    return React6.createElement(React6.Fragment, null, formattedRelativeTime);
  };
  var FormattedRelativeTime = function(_a) {
    var value = _a.value, unit = _a.unit, updateIntervalInSeconds = _a.updateIntervalInSeconds, otherProps = (0, import_tslib5.__rest)(_a, ["value", "unit", "updateIntervalInSeconds"]);
    (0, import_ecma402_abstract2.invariant)(!updateIntervalInSeconds || !!(updateIntervalInSeconds && canIncrement(unit)), "Cannot schedule update with unit longer than hour");
    var _b = React6.useState(), prevUnit = _b[0], setPrevUnit = _b[1];
    var _c = React6.useState(0), prevValue = _c[0], setPrevValue = _c[1];
    var _d = React6.useState(0), currentValueInSeconds = _d[0], setCurrentValueInSeconds = _d[1];
    var updateTimer;
    if (unit !== prevUnit || value !== prevValue) {
      setPrevValue(value || 0);
      setPrevUnit(unit);
      setCurrentValueInSeconds(canIncrement(unit) ? valueToSeconds(value, unit) : 0);
    }
    React6.useEffect(function() {
      function clearUpdateTimer() {
        clearTimeout(updateTimer);
      }
      clearUpdateTimer();
      if (!updateIntervalInSeconds || !canIncrement(unit)) {
        return clearUpdateTimer;
      }
      var nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;
      var nextUnit = selectUnit(nextValueInSeconds);
      if (nextUnit === "day") {
        return clearUpdateTimer;
      }
      var unitDuration2 = getDurationInSeconds(nextUnit);
      var remainder = nextValueInSeconds % unitDuration2;
      var prevInterestingValueInSeconds = nextValueInSeconds - remainder;
      var nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds ? prevInterestingValueInSeconds - unitDuration2 : prevInterestingValueInSeconds;
      var delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);
      if (currentValueInSeconds !== nextInterestingValueInSeconds) {
        updateTimer = setTimeout(function() {
          return setCurrentValueInSeconds(nextInterestingValueInSeconds);
        }, delayInSeconds * 1e3);
      }
      return clearUpdateTimer;
    }, [currentValueInSeconds, updateIntervalInSeconds, unit]);
    var currentValue = value || 0;
    var currentUnit = unit;
    if (canIncrement(unit) && typeof currentValueInSeconds === "number" && updateIntervalInSeconds) {
      currentUnit = selectUnit(currentValueInSeconds);
      var unitDuration = getDurationInSeconds(currentUnit);
      currentValue = Math.round(currentValueInSeconds / unitDuration);
    }
    return React6.createElement(SimpleFormattedRelativeTime, (0, import_tslib5.__assign)({ value: currentValue, unit: currentUnit }, otherProps));
  };
  FormattedRelativeTime.displayName = "FormattedRelativeTime";
  FormattedRelativeTime.defaultProps = {
    value: 0,
    unit: "second"
  };
  var relative_default = FormattedRelativeTime;

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/plural.js
  var React7 = __toESM(window.React);
  var FormattedPlural = function(props) {
    var _a = useIntl(), formatPlural = _a.formatPlural, Text = _a.textComponent;
    var value = props.value, other = props.other, children = props.children;
    var pluralCategory = formatPlural(value, props);
    var formattedPlural = props[pluralCategory] || other;
    if (typeof children === "function") {
      return children(formattedPlural);
    }
    if (Text) {
      return React7.createElement(Text, null, formattedPlural);
    }
    return formattedPlural;
  };
  FormattedPlural.defaultProps = {
    type: "cardinal"
  };
  FormattedPlural.displayName = "FormattedPlural";
  var plural_default = FormattedPlural;

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/message.js
  var import_tslib6 = __toESM(require_tslib());
  var React8 = __toESM(window.React);
  function areEqual(prevProps, nextProps) {
    var values = prevProps.values, otherProps = (0, import_tslib6.__rest)(prevProps, ["values"]);
    var nextValues = nextProps.values, nextOtherProps = (0, import_tslib6.__rest)(nextProps, ["values"]);
    return shallowEqual(nextValues, values) && shallowEqual(otherProps, nextOtherProps);
  }
  function FormattedMessage(props) {
    var intl = useIntl();
    var formatMessage2 = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React8.Fragment : _a;
    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;
    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };
    var nodes = formatMessage2(descriptor, values, {
      ignoreTag: ignoreTag
    });
    if (typeof children === "function") {
      return children(Array.isArray(nodes) ? nodes : [nodes]);
    }
    if (Component) {
      return React8.createElement(Component, null, React8.Children.toArray(nodes));
    }
    return React8.createElement(React8.Fragment, null, nodes);
  }
  FormattedMessage.displayName = "FormattedMessage";
  var MemoizedFormattedMessage = React8.memo(FormattedMessage, areEqual);
  MemoizedFormattedMessage.displayName = "MemoizedFormattedMessage";
  var message_default = MemoizedFormattedMessage;

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/src/components/dateTimeRange.js
  var import_tslib7 = __toESM(require_tslib());
  var React9 = __toESM(window.React);
  var FormattedDateTimeRange = function(props) {
    var intl = useIntl();
    var from = props.from, to = props.to, children = props.children, formatProps = (0, import_tslib7.__rest)(props, ["from", "to", "children"]);
    var formattedValue = intl.formatDateTimeRange(from, to, formatProps);
    if (typeof children === "function") {
      return children(formattedValue);
    }
    var Text = intl.textComponent || React9.Fragment;
    return React9.createElement(Text, null, formattedValue);
  };
  FormattedDateTimeRange.displayName = "FormattedDateTimeRange";
  var dateTimeRange_default = FormattedDateTimeRange;

  // bazel-out/darwin-fastbuild/bin/packages/react-intl/lib/index.js
  var import_intl3 = __toESM(require_intl());
  function defineMessages(msgs) {
    return msgs;
  }
  function defineMessage(msg) {
    return msg;
  }
  var FormattedDate = createFormattedComponent("formatDate");
  var FormattedTime = createFormattedComponent("formatTime");
  var FormattedNumber = createFormattedComponent("formatNumber");
  var FormattedList = createFormattedComponent("formatList");
  var FormattedDisplayName = createFormattedComponent("formatDisplayName");
  var FormattedDateParts = createFormattedDateTimePartsComponent("formatDate");
  var FormattedTimeParts = createFormattedDateTimePartsComponent("formatTime");
  return __toCommonJS(lib_exports);
})();
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=react-intl.esbuild.iife.js.map
